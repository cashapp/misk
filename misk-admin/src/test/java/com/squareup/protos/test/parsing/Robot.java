// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: parsing/parsing.proto
package com.squareup.protos.test.parsing;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import okio.ByteString;

public final class Robot extends Message<Robot, Robot.Builder> {
  public static final ProtoAdapter<Robot> ADAPTER = new ProtoAdapter_Robot();
  public static final Integer DEFAULT_ROBOT_ID = 0;
  public static final String DEFAULT_ROBOT_TOKEN = "";
  private static final long serialVersionUID = 0L;
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer robot_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String robot_token;

  public Robot(Integer robot_id, String robot_token) {
    this(robot_id, robot_token, ByteString.EMPTY);
  }

  public Robot(Integer robot_id, String robot_token, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.robot_id = robot_id;
    this.robot_token = robot_token;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.robot_id = robot_id;
    builder.robot_token = robot_token;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Robot)) return false;
    Robot o = (Robot) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(robot_id, o.robot_id)
        && Internal.equals(robot_token, o.robot_token);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (robot_id != null ? robot_id.hashCode() : 0);
      result = result * 37 + (robot_token != null ? robot_token.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (robot_id != null) builder.append(", robot_id=").append(robot_id);
    if (robot_token != null) builder.append(", robot_token=").append(robot_token);
    return builder.replace(0, 2, "Robot{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Robot, Builder> {
    public Integer robot_id;

    public String robot_token;

    public Builder() {
    }

    public Builder robot_id(Integer robot_id) {
      this.robot_id = robot_id;
      return this;
    }

    public Builder robot_token(String robot_token) {
      this.robot_token = robot_token;
      return this;
    }

    @Override
    public Robot build() {
      return new Robot(robot_id, robot_token, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Robot extends ProtoAdapter<Robot> {
    public ProtoAdapter_Robot() {
      super(FieldEncoding.LENGTH_DELIMITED, Robot.class);
    }

    @Override
    public int encodedSize(Robot value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.robot_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.robot_token)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Robot value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.robot_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.robot_token);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Robot decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1; ) {
        switch (tag) {
          case 1:
            builder.robot_id(ProtoAdapter.INT32.decode(reader));
            break;
          case 2:
            builder.robot_token(ProtoAdapter.STRING.decode(reader));
            break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Robot redact(Robot value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
