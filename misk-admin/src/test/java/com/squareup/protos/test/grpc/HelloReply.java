// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: parsing/helloworld.proto
package com.squareup.protos.test.grpc;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import okio.ByteString;

/**
 * The response message containing the greetings
 */
public final class HelloReply extends Message<HelloReply, HelloReply.Builder> {
  public static final ProtoAdapter<HelloReply> ADAPTER = new ProtoAdapter_HelloReply();
  public static final String DEFAULT_MESSAGE = "";
  private static final long serialVersionUID = 0L;
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String message;

  public HelloReply(String message) {
    this(message, ByteString.EMPTY);
  }

  public HelloReply(String message, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.message = message;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.message = message;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HelloReply)) return false;
    HelloReply o = (HelloReply) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(message, o.message);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (message != null ? message.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (message != null) builder.append(", message=").append(message);
    return builder.replace(0, 2, "HelloReply{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HelloReply, Builder> {
    public String message;

    public Builder() {
    }

    public Builder message(String message) {
      this.message = message;
      return this;
    }

    @Override
    public HelloReply build() {
      return new HelloReply(message, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HelloReply extends ProtoAdapter<HelloReply> {
    public ProtoAdapter_HelloReply() {
      super(FieldEncoding.LENGTH_DELIMITED, HelloReply.class);
    }

    @Override
    public int encodedSize(HelloReply value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.message)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HelloReply value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.message);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HelloReply decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1; ) {
        switch (tag) {
          case 1:
            builder.message(ProtoAdapter.STRING.decode(reader));
            break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HelloReply redact(HelloReply value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
