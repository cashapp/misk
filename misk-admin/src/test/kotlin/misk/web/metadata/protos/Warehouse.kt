// Code generated by Wire protocol buffer compiler, do not edit.
package misk.web.metadata.protos

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.checkElementsNotNull
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

public class Warehouse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  @JvmField
  public val warehouse_id: Long? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  public val warehouse_token: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "misk.web.metadata.protos.Warehouse#ADAPTER"
  )
  @JvmField
  public val central_repo: Warehouse? = null,
  alternates: List<Warehouse> = emptyList(),
  dropoff_points: Map<String, String> = emptyMap(),
  robots: Map<Int, Robot> = emptyMap(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<Warehouse, Warehouse.Builder>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 4,
    adapter = "misk.web.metadata.protos.Warehouse#ADAPTER",
    label = WireField.Label.REPEATED
  )
  @JvmField
  public val alternates: List<Warehouse> = immutableCopyOf("alternates", alternates)

  @field:WireField(
    tag = 6,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  @JvmField
  public val dropoff_points: Map<String, String> = immutableCopyOf("dropoff_points", dropoff_points)

  @field:WireField(
    tag = 7,
    keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
    adapter = "misk.web.metadata.protos.Robot#ADAPTER"
  )
  @JvmField
  public val robots: Map<Int, Robot> = immutableCopyOf("robots", robots)

  public override fun newBuilder(): Builder {
    val builder = Builder()
    builder.warehouse_id = warehouse_id
    builder.warehouse_token = warehouse_token
    builder.central_repo = central_repo
    builder.alternates = alternates
    builder.dropoff_points = dropoff_points
    builder.robots = robots
    builder.addUnknownFields(unknownFields)
    return builder
  }

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Warehouse) return false
    if (unknownFields != other.unknownFields) return false
    if (warehouse_id != other.warehouse_id) return false
    if (warehouse_token != other.warehouse_token) return false
    if (central_repo != other.central_repo) return false
    if (alternates != other.alternates) return false
    if (dropoff_points != other.dropoff_points) return false
    if (robots != other.robots) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + warehouse_id.hashCode()
      result = result * 37 + warehouse_token.hashCode()
      result = result * 37 + central_repo.hashCode()
      result = result * 37 + alternates.hashCode()
      result = result * 37 + dropoff_points.hashCode()
      result = result * 37 + robots.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (warehouse_id != null) result += """warehouse_id=$warehouse_id"""
    if (warehouse_token != null) result += """warehouse_token=${sanitize(warehouse_token)}"""
    if (central_repo != null) result += """central_repo=$central_repo"""
    if (alternates.isNotEmpty()) result += """alternates=$alternates"""
    if (dropoff_points.isNotEmpty()) result += """dropoff_points=$dropoff_points"""
    if (robots.isNotEmpty()) result += """robots=$robots"""
    return result.joinToString(prefix = "Warehouse{", separator = ", ", postfix = "}")
  }

  public fun copy(
    warehouse_id: Long? = this.warehouse_id,
    warehouse_token: String? = this.warehouse_token,
    central_repo: Warehouse? = this.central_repo,
    alternates: List<Warehouse> = this.alternates,
    dropoff_points: Map<String, String> = this.dropoff_points,
    robots: Map<Int, Robot> = this.robots,
    unknownFields: ByteString = this.unknownFields
  ): Warehouse = Warehouse(
    warehouse_id, warehouse_token, central_repo, alternates, dropoff_points,
    robots, unknownFields
  )

  public class Builder : Message.Builder<Warehouse, Builder>() {
    @JvmField
    public var warehouse_id: Long? = null

    @JvmField
    public var warehouse_token: String? = null

    @JvmField
    public var central_repo: Warehouse? = null

    @JvmField
    public var alternates: List<Warehouse> = emptyList()

    @JvmField
    public var dropoff_points: Map<String, String> = emptyMap()

    @JvmField
    public var robots: Map<Int, Robot> = emptyMap()

    public fun warehouse_id(warehouse_id: Long?): Builder {
      this.warehouse_id = warehouse_id
      return this
    }

    public fun warehouse_token(warehouse_token: String?): Builder {
      this.warehouse_token = warehouse_token
      return this
    }

    public fun central_repo(central_repo: Warehouse?): Builder {
      this.central_repo = central_repo
      return this
    }

    public fun alternates(alternates: List<Warehouse>): Builder {
      checkElementsNotNull(alternates)
      this.alternates = alternates
      return this
    }

    public fun dropoff_points(dropoff_points: Map<String, String>): Builder {
      this.dropoff_points = dropoff_points
      return this
    }

    public fun robots(robots: Map<Int, Robot>): Builder {
      this.robots = robots
      return this
    }

    public override fun build(): Warehouse = Warehouse(
      warehouse_id = warehouse_id,
      warehouse_token = warehouse_token,
      central_repo = central_repo,
      alternates = alternates,
      dropoff_points = dropoff_points,
      robots = robots,
      unknownFields = buildUnknownFields()
    )
  }

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Warehouse> = object : ProtoAdapter<Warehouse>(
      FieldEncoding.LENGTH_DELIMITED,
      Warehouse::class,
      "type.googleapis.com/squareup.cash.prospector.data.Warehouse",
      PROTO_2,
      null
    ) {
      private val dropoff_pointsAdapter: ProtoAdapter<Map<String, String>> by lazy {
        ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING)
      }

      private val robotsAdapter: ProtoAdapter<Map<Int, Robot>> by lazy {
        ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, Robot.ADAPTER)
      }

      public override fun encodedSize(value: Warehouse): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.warehouse_id)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.warehouse_token)
        size += Warehouse.ADAPTER.encodedSizeWithTag(3, value.central_repo)
        size += Warehouse.ADAPTER.asRepeated().encodedSizeWithTag(4, value.alternates)
        size += dropoff_pointsAdapter.encodedSizeWithTag(6, value.dropoff_points)
        size += robotsAdapter.encodedSizeWithTag(7, value.robots)
        return size
      }

      public override fun encode(writer: ProtoWriter, value: Warehouse) {
        ProtoAdapter.INT64.encodeWithTag(writer, 1, value.warehouse_id)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.warehouse_token)
        Warehouse.ADAPTER.encodeWithTag(writer, 3, value.central_repo)
        Warehouse.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.alternates)
        dropoff_pointsAdapter.encodeWithTag(writer, 6, value.dropoff_points)
        robotsAdapter.encodeWithTag(writer, 7, value.robots)
        writer.writeBytes(value.unknownFields)
      }

      public override fun decode(reader: ProtoReader): Warehouse {
        var warehouse_id: Long? = null
        var warehouse_token: String? = null
        var central_repo: Warehouse? = null
        val alternates = mutableListOf<Warehouse>()
        val dropoff_points = mutableMapOf<String, String>()
        val robots = mutableMapOf<Int, Robot>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> warehouse_id = ProtoAdapter.INT64.decode(reader)
            2 -> warehouse_token = ProtoAdapter.STRING.decode(reader)
            3 -> central_repo = Warehouse.ADAPTER.decode(reader)
            4 -> alternates.add(Warehouse.ADAPTER.decode(reader))
            6 -> dropoff_points.putAll(dropoff_pointsAdapter.decode(reader))
            7 -> robots.putAll(robotsAdapter.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Warehouse(
          warehouse_id = warehouse_id,
          warehouse_token = warehouse_token,
          central_repo = central_repo,
          alternates = alternates,
          dropoff_points = dropoff_points,
          robots = robots,
          unknownFields = unknownFields
        )
      }

      public override fun redact(value: Warehouse): Warehouse = value.copy(
        central_repo = value.central_repo?.let(Warehouse.ADAPTER::redact),
        alternates = value.alternates.redactElements(Warehouse.ADAPTER),
        robots = value.robots.redactElements(Robot.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
