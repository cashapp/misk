package misk.crypto

import com.google.crypto.tink.CleartextKeysetHandle
import com.google.crypto.tink.JsonKeysetReader
import com.google.crypto.tink.JsonKeysetWriter
import com.google.crypto.tink.aead.KmsEnvelopeAead
import misk.config.MiskConfig
import java.io.ByteArrayOutputStream

/**
 * These test keys are used by the [FakeKeyResolver] class.
 * *DO NOT USE IN ANY OTHER SITUATION*
 */
internal class TestKeysets {
  companion object {
    fun encryptSecret(key: MiskConfig.RealSecret<String>): MiskConfig.RealSecret<String> {
      val kek = KmsEnvelopeAead(KeyReader.KEK_TEMPLATE, FakeMasterEncryptionKey())
      val keyOutput = ByteArrayOutputStream()
      val plaintextKey = CleartextKeysetHandle.read(JsonKeysetReader.withString(key.value))
      plaintextKey.write(JsonKeysetWriter.withOutputStream(keyOutput), kek)
      return MiskConfig.RealSecret(keyOutput.toString())
    }
    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template AES256_GCM`
     */
    val AEAD = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 287541552,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.AesGcmKey",
            "keyMaterialType": "SYMMETRIC",
            "value": "GiCQjc0CLkz8Fyn39oheg30dtDGqOVLPmol476EVuWtSPw=="
        },
        "outputPrefixType": "TINK",
        "keyId": 287541552,
        "status": "ENABLED"
    }]
}"""
    )

    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template AES256_SIV`
     */
    val DAEAD = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 1677617234,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.AesSivKey",
            "keyMaterialType": "SYMMETRIC",
            "value": "EkBrZ6w6t7hh4gCVw36fYiPJXgJqxoBpHV2/fWhluU9b3pAUBE3i3f3gYXv0im8TacC1L8zbsm9ppJJMiue2f8pF"
        },
        "outputPrefixType": "TINK",
        "keyId": 1677617234,
        "status": "ENABLED"
    }]
}"""
    )

    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template ECDSA_P256`
     */
    val DIGITAL_SIGNATURE = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 1279591183,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.EcdsaPrivateKey",
            "keyMaterialType": "ASYMMETRIC_PRIVATE",
            "value": "Ek0SBggDEAIYAhogQKqZ2vtpkUK0SP01B46zkZhLdldFtc4IOPo5g3JXsssiIQD5/kxKXYRAT4o7XD7/ic7ydQ7d3RohaDeNqyQPZehuRRogCoYkMyycYhu3/EIlD4SNSLazZD/y4vNCZGzGkQ6GlQY="
        },
        "outputPrefixType": "TINK",
        "keyId": 1279591183,
        "status": "ENABLED"
    }]
}"""
    )

    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template ECIES_P256_HKDF_HMAC_SHA256_AES128_CTR_HMAC_SHA256`
     */
    val HYBRID = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 1026740700,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey",
            "keyMaterialType": "ASYMMETRIC_PRIVATE",
            "value": "EqMBElwKBAgCEAMSUhJQCjh0eXBlLmdvb2dsZWFwaXMuY29tL2dvb2dsZS5jcnlwdG8udGluay5BZXNDdHJIbWFjQWVhZEtleRISCgYKAggQEBASCAoECAMQEBAgGAEYARohANfrDi8rKtmSFZlvRS6kss61EdTCuR4fm5mYQsqQQaxTIiA66YQj+HxV8wjj7YFD19Rcd+hdTzyCaQNxJBAnxDZS3xohALz7hT5rkQHNT1X5coQvn74CtOV1w+/iRS2TiTCKauoR"
        },
        "outputPrefixType": "TINK",
        "keyId": 1026740700,
        "status": "ENABLED"
    }]
}"""
    )

    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template HMAC_SHA256_256BITTAG`
     */
    val MAC = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 1113231046,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.HmacKey",
            "keyMaterialType": "SYMMETRIC",
            "value": "EgQIAxAgGiD7iTus1Y3HeUGgC+IUuOWjugyv1Dtdn+wxZyY0Y/JHjw=="
        },
        "outputPrefixType": "TINK",
        "keyId": 1113231046,
        "status": "ENABLED"
    }]
}"""
    )

    /**
     * Created with tikney:
     * `tinkey create-keyset --key-template AES256_GCM_HKDF_4KB`
     */
    val STREAMING_AEAD = MiskConfig.RealSecret(
      """{
    "primaryKeyId": 1557709997,
    "key": [{
        "keyData": {
            "typeUrl": "type.googleapis.com/google.crypto.tink.AesGcmHkdfStreamingKey",
            "keyMaterialType": "SYMMETRIC",
            "value": "EgcIgCAQIBgDGiCOpS4385YjQj0pnWtXjW0nekgs8ztrvn2zfyBS3JiKdQ=="
        },
        "outputPrefixType": "RAW",
        "keyId": 1557709997,
        "status": "ENABLED"
    }]
}"""
    )

    val PGP_DECRYPT = MiskConfig.RealSecret(
      """{
  "region": "",
  "encrypted_private_key": "",
  "public_key": "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgp4c0ZOQkY5dVBUSUJFQUN0MkRzTTFhNS9Ca2NmVFBMZ1VBaWp0M0QxNnNIQit3cUNOTVdHK2VTOGVOS3h6dW05CjZvbXBGb0YrOEFnc2laTjU4QWhMOFdSYkVSNEdjSzNOT1ZHbjBYalNQYWRWOXFHQ1QwYTVkZTdnYkRkSFMyd0gKTmJvWDhRQ3RhQ295NkdEZ05iZFZFV1UxN1JocXBIajljY3AvZEhiclJVVFErdHFTbnBKU2RVV3VRaCtOMzVFcAo0VmtKNi8yTUJWaW5xdmZLTUVtd2grWTVTdlQ5ZXBiQndVN0tvTHhmVHVkT085Mzh0Ykt4aDZuaFVXUWlsYjBFClZvV21OdEZIUWZpYUZ0bWZvRENsN3N2cGMxV01iQStwdFRVSVRnMG5oY3RQWU00N0Zlb1ovZjRWcjlNazhVQnUKamJDUzdDZEkwYlpoQUZnK2lWbmtPdjMxQk9YVFZPdy9aeDUvK0dEZTF2M3VUSkdJcWo2THZkR2xGbG01NTNxdgphLzVmcTlUTC85dUp5U1MzRGY5V2JiTVAvcnRxVGNHRzZGZDlWT2MrRGpHbTJjallWcEp4aGhlVW1wZ1JoNngzCmlLbzRaeXdZTDhZa3E5OGlsUUlyWlhEekNjbVNST2FlaHFWYm9GTVFwTnUxdURlUzRPOGJFQVM1Tm5teWZ1TlIKLytWc1lEbndQOG40S1hYUmY4QWpEK2tSOFZRc2xoNGpTWU84b3RBOW9ybHNSS2YxWkJhaXJGQmVSblB0N29CNQpCbGxSU1hVeFp1NlB5Qy9EVzNzMzlHTldGMEZjd3BZeDdFc1kyZVdGYjc1aHhxRzBZOEZSQ3I2S1J6NUExbHVDCnZUZHhHaEdGSkNVbXVEd3prcWo4cWc1Tk5VemxJTjN6OEdkQmxMVVVaQWJvS282ZTBoOEtFOU1qaFFBUkFRQUIKelM5dGFYTnJMV055ZVhCMGJ5MWxlR0Z0Y0d4bElDaDBaWE4wSUd0bGVTa2dQSFJsYzNSQVpXMWhhV3d1WTI5dApQc0xCWWdRVEFRZ0FGZ1VDWDI0OU1na1FTMHpobFRPa29LUUNHd01DR1FFQUFHWElFQUNhZ1JUQ09OazY0b0FBCk9kTi9UMDg3VXJxV3NGNEcxbDVOZDY4RjZHbFJUR29uMi85YUc4YjNFckV6Tmg1bzdhTEN1MGs4SkU0SU5idXIKc2JKdlVabjNGTzNVZkEveVlhYXVtNFgwaDVpand4emVWU1o0R1BHOTFUQUdlajJvZXh5NUM1Y0xkNC91dkJFaQpMWTdsV1dYTW8rR1haa3QxQlNPT1BDRC9EN0o5UWhIT1VuSFo1cEtxTnVWazdiaTA3Z2xtZjJqSXVPV2RxdGFmCmltNnZuR0o1bXZtdDJMRFdIc3hGVHQ1ajdsbEJKdGxhR1hSeGVkVHlCTENLY1FNN2ZSZGNjZGxvbUEzeDg2VlQKTlBFYk5vTjl0ZHgxNlFZL3NzYnJvaGFBVmd1T2RVR0MwRGxBaVNrdW0zdmg0WG1DcXppOEFUZ3BEaWt2aWZrUwpYMUdzaDc1RUZzL3pQYXBZTDNCaWhBUHg2eVZrY1VEMEV2dS9wRU9xdUhROUhFZEFDTXp1TWw0Yng0VW9uOEVDCjBUQjdhWkRDWE90WlF2UlY0Z2c3dkRTaXpFL0M1aFNLU2FRSFpwK1IzMDZqYmRmN0RJeTlxRFp0ODRPakFIRGEKZUtjSXZKYm1UM0lnUzJDdE9oVGdVWVcrbC9GZjdNSWNXRTlGMG9nUEdZUTlmSG1wS1hsc3VTSm1QRW9ZYmRhRwpZdk92RlhjN0drVU1SekNMeWhUMGR4MXpVY0lLbFBrVWVEVEoybk81UU1kdHVodFUxSGlvRUpESEIvTTRuS0hRClhmUUtoZm1aWC9SbFNMR2k2SkQwMDRWbUR2VURaWTB4alY2UGVrZTdab1RsZ3JLWTNkdHY3L21uQ0N0QjhpWFcKZzRlYU9odmRMQ2JwVVpqT1RDZ1FvVUxrR0NhUUk4N0JUUVJmYmoweUFSQUFzTWszWWVsTkxQOWdEVHhOTXRlbApaU0IxZUwyVTQ3R2pHL2RaQnBEQ3VEayszenp2aFBmcFNnWEcxUXZ5dHZCU2xrMENxeTNkb1o3b1R0RmxiOE9HCjBLdWJ4OVZzYzFzNmNUQWRmOUtPbGZXaUlsRnZLUndaRjlodzhvTkVSK2N1eU1YVXZzUkJoU1ZudTI5eGx4VHgKbG0wbTRHNFh4TDlCM0IxRGcvaGdkcHdqaVE0SFRWdldEZDNiRHhrWlhLOG1VbTVGNkVpY3dyZW1PeDJlcmNmMApwYUZ6RWRpeDUwUTljN3d5Q1FoYUVYSXBvMzhoOGR4Ykh0Q3c1Z0F6Wm9MaWM3Z1RaYnZjL1ArdUJROUFvVmdwCjdLOWVIM1hPclNOQkFQbUp6RWd1NGF5QXlURWRqQm1OL3diM3FnSjhRQzN0ZW93SjVQNjJYc1RmMnk5cUFiMkkKQTN1RVN2RTRGZ1paVmp0RG9OT0YwY3BkSGp4MDBqTEZBcFo0b3pTWXhndnZVMERCZEN0VE1XdmgramFFM0lobQoxVXloRHRwTmhTVkJVMGRxQ2w2N1ZIT1pUbkdrajJRU08rT2JvY2ZITTFaMXdiQytJMkU2akt2YWNYZkxvSmxvCm1tai8xK2VQVitLSUttV1pxMmpsRWFBT3FVemR2UkdOOVhPak92YXh1MEZhQ1RMQlBvUlVicUlhcHBTeHBSM0wKOU8wUjFlcmgwV1BBSm5hSGhBR2lWK24vcXZiQmVKaGNxbnUzYUlZTXpZbDZyZzd2M0NPYUd2eW5aYzFJM1VsYwpqMHJMb0tPMEdwdElINGpUbXo4MU8rZ0x4TFZQZWVTUk9uRjA2Uk1ZaGdpcEtSUVJUYzRYOHphTUpHZW1IbWVyCisxK2JqSnY3alFUR05SaVhYbWh2WDFFQUVRRUFBY0xCWHdRWUFRZ0FFd1VDWDI0OU1na1FTMHpobFRPa29LUUMKR3d3QUFKaFdFQUNCeWh3NUQ4WXNoaDRESnhnWTh0byt6TWdhdm81ZGNHVWxodlFybmJtRHlQeXJPejREQW5ZegpUQ3BKa1E2WGZ6Z1NjUGw5ZVRQdnNrU3ZkMjlxd2RlZE82bkJ0T0JwRE9ndGRwYm01RGtXMEd2bjFsUjhmNklHClUvenVETkJrMnh6eXgxTjM0Q3NmVkplb2d5aVIwSzcyZTJEQTN6aHJXaE1BUDJ5OUlEdWNTRWhBSVpHblZLSVoKSng0UzhIYmlHRWxNMWsvb014YVpYNEdPL3VYMmlUdzZMTDIyaEZHM0I5TE5YK2RSZWNSRGV5d1lrWmhRMG5zcApVaDZTWEozZVNHN3loRHFoamNBSU0xTW5lWjRNK0wxSXQyWGdOeVEyVFR4bmExcDhkZ2E5TjlkM0ZLZ0FMa2tECjJ3dXlEYjlkR042NGtOMDJHMUcrci9seU52MTdyRy9xMCtLMDhmc29FUzRZZ2pJZzlMZlRRUDI1NUV0RG5lK2sKTUZ1MVRMa3o1OHlBVE9kc2NHdUZ3Z095SENoVmxJb3hyeXJrZE51QWI4c1NGMEx3MGc2QnpLYStOelpWVitsRwpaYnVreWZFUEU5ZGc2cVVUdEFJVmUxc2htMjNnS2kyeTRFandPYzM3SVkxVmtpUm1jYnlqcWxCOFZDbS8vVm5OCkVEWTNkTk1qU1U2M0N1cThYdm80YlNSRjRIdW8zeU50c3lCWnl2blcyS2ZUZmFYZFQzanB0ZVkyZThRdWZzb28KT2tyK2lzQUNic0xaZVNWUEhWV3RmWG5yS3lEcm5mNjkxVGdCb1lXK2pVU1E5WXZEOXNNZ3BOZ0h4S0MvOUdTVQpCeURhQTQ2dUNHeU5OcC9DWnZWRkpwbU5nczgvaGhEa0s5UmQwMlhOZklieGxYUk9VR3cxdlE9PQo9cjdkTQotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0t",
  "pgp": {
    "name": "misk-crypto-example",
    "email": "test@email.com",
    "comment": "test key"
  },
  "aws_kms_key_id": ""
}"""
    )

    val PGP_ENCRYPT = MiskConfig.RealSecret(
      """-----BEGIN PGP PUBLIC KEY BLOCK-----

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
=r7dM
-----END PGP PUBLIC KEY BLOCK-----"""
    )
  }
}
