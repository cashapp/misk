public abstract interface class misk/concurrent/ExecutorServiceFactory {
	public abstract fun fixed (Ljava/lang/String;I)Ljava/util/concurrent/ExecutorService;
	public abstract fun scheduled (Ljava/lang/String;I)Ljava/util/concurrent/ScheduledExecutorService;
	public abstract fun single (Ljava/lang/String;)Ljava/util/concurrent/ExecutorService;
	public abstract fun unbounded (Ljava/lang/String;)Ljava/util/concurrent/ExecutorService;
}

public abstract interface class misk/concurrent/Sleeper {
	public static final field Companion Lmisk/concurrent/Sleeper$Companion;
	public abstract fun sleep (Ljava/time/Duration;)V
}

public final class misk/concurrent/Sleeper$Companion {
	public final fun getDEFAULT ()Lmisk/concurrent/Sleeper;
}

public final class misk/sampling/AlwaysSampler : misk/sampling/Sampler {
	public fun <init> ()V
	public fun sample ()Z
	public fun sampledCall (Lkotlin/jvm/functions/Function0;)V
}

public final class misk/sampling/PercentSampler : misk/sampling/Sampler {
	public fun <init> (I)V
	public fun <init> (ILkotlin/jvm/functions/Function0;)V
	public fun <init> (Lkotlin/jvm/functions/Function0;)V
	public fun <init> (Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function0;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function0;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getRandom ()Lkotlin/jvm/functions/Function0;
	public final fun getSamplePercentage ()Lkotlin/jvm/functions/Function0;
	public fun sample ()Z
	public fun sampledCall (Lkotlin/jvm/functions/Function0;)V
}

public final class misk/sampling/RateLimiter {
	public synthetic fun <init> (Lcom/google/common/base/Ticker;Lmisk/concurrent/Sleeper;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getPermitsPerSecond ()J
	public final fun getPermitsRemaining (Ljava/util/concurrent/TimeUnit;J)J
	public final fun setPermitsPerSecond (J)V
	public final fun tryAcquire (JJLjava/util/concurrent/TimeUnit;)Z
}

public final class misk/sampling/RateLimiter$Factory {
	public fun <init> (Lcom/google/common/base/Ticker;Lmisk/concurrent/Sleeper;)V
	public final fun create (J)Lmisk/sampling/RateLimiter;
}

public final class misk/sampling/RateLimitingSampler : misk/sampling/Sampler {
	public fun <init> (J)V
	public fun <init> (Lmisk/sampling/RateLimiter;)V
	public fun sample ()Z
	public fun sampledCall (Lkotlin/jvm/functions/Function0;)V
}

public abstract interface class misk/sampling/Sampler {
	public static final field Companion Lmisk/sampling/Sampler$Companion;
	public abstract fun sample ()Z
	public abstract fun sampledCall (Lkotlin/jvm/functions/Function0;)V
}

public final class misk/sampling/Sampler$Companion {
	public final fun always ()Lmisk/sampling/Sampler;
	public final fun percentage (I)Lmisk/sampling/Sampler;
	public final fun rateLimiting (J)Lmisk/sampling/Sampler;
}

public final class misk/sampling/Sampler$DefaultImpls {
	public static fun sampledCall (Lmisk/sampling/Sampler;Lkotlin/jvm/functions/Function0;)V
}

