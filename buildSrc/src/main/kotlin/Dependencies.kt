object Dependencies {
  val apacheCommonsLang3 = "org.apache.commons:commons-lang3:3.11"
  val apacheCommonsPool2 = "org.apache.commons:commons-pool2:2.11.1"
  val assertj = "org.assertj:assertj-core:3.24.2"
  val awaitility = "org.awaitility:awaitility:4.1.0"
  val awaitilityKotlin = "org.awaitility:awaitility-kotlin:4.1.0"
  val aws2Dynamodb = "software.amazon.awssdk:dynamodb:2.19.33"
  val aws2DynamodbEnhanced = "software.amazon.awssdk:dynamodb-enhanced:2.19.33"
  val awsAuth = "software.amazon.awssdk:auth:2.19.33"
  val awsCore = "software.amazon.awssdk:aws-core:2.19.33"
  val awsDynamodb = "com.amazonaws:aws-java-sdk-dynamodb:1.12.460"
  val awsJavaSdkCore = "com.amazonaws:aws-java-sdk-core:1.12.460"
  val awsRegions = "software.amazon.awssdk:regions:2.19.33"
  val awsS3 = "com.amazonaws:aws-java-sdk-s3:1.12.460"
  val awsSdkCore = "software.amazon.awssdk:sdk-core:2.19.33"
  val awsSqs = "com.amazonaws:aws-java-sdk-sqs:1.12.460"
  val bouncycastle = "org.bouncycastle:bcprov-jdk15on:1.70"
  val bouncycastlePgp = "org.bouncycastle:bcpg-jdk15on:1.70"
  val concurrencyLimitsCore = "com.netflix.concurrency-limits:concurrency-limits-core:0.3.6"
  val cronUtils = "com.cronutils:cron-utils:9.1.5"
  val datasourceProxy = "net.ttddyy:datasource-proxy:1.7"
  val dependencyAnalysisPluginVersion = "1.20.0"
  val dockerApi = "com.github.docker-java:docker-java-api:3.3.0"
  val dockerCore = "com.github.docker-java:docker-java-core:3.3.0"
  val dockerTransport = "com.github.docker-java:docker-java-transport:3.3.0"
  val dockerTransportHttpClient = "com.github.docker-java:docker-java-transport-httpclient5:3.3.0"
  val dokkaGradlePlugin = "org.jetbrains.dokka:dokka-gradle-plugin:1.6.10"
  val errorproneAnnotations = "com.google.errorprone:error_prone_annotations:2.20.0"
  val findBugs = "com.google.code.findbugs:jsr305:3.0.2"
  val gax = "com.google.api:gax:2.5.0"
  val gcpCloudCore = "com.google.cloud:google-cloud-core:1.95.4"
  val gcpCloudStorage = "com.google.cloud:google-cloud-storage:1.117.1"
  val gcpDatastore = "com.google.cloud:google-cloud-datastore:1.107.1"
  val gcpKms = "com.google.apis:google-api-services-cloudkms:v1-rev20210622-1.31.5"
  val gcpLogback = "com.google.cloud:google-cloud-logging-logback:0.130.11-alpha"
  val gcpLogging = "com.google.cloud:google-cloud-logging:2.3.2"
  val gcpSpanner = "com.google.cloud:google-cloud-spanner:6.13.0"
  val googleApiClient = "com.google.api-client:google-api-client:1.32.1"
  val googleApiServicesStorage = "com.google.apis:google-api-services-storage:v1-rev20210127-1.31.5"
  val googleAuthLibraryCredentials = "com.google.auth:google-auth-library-credentials:1.1.0"
  val googleAuthLibraryOauth2 = "com.google.auth:google-auth-library-oauth2-http:1.1.0"
  val googleCloudCoreHttp = "com.google.cloud:google-cloud-core-http:1.95.4"
  val googleHttpClient = "com.google.http-client:google-http-client:1.40.0"
  val googleHttpClientJackson = "com.google.http-client:google-http-client-jackson2:1.39.2"
  val grpcApi = "io.grpc:grpc-api:1.55.1"
  val grpcBom = "io.grpc:grpc-bom:1.55.1"
  val grpcGenJava = "io.grpc:protoc-gen-grpc-java:1.55.1"
  val grpcNetty = "io.grpc:grpc-netty:1.55.1"
  val grpcProtobuf = "io.grpc:grpc-protobuf:1.55.1"
  val grpcStub = "io.grpc:grpc-stub:1.55.1"
  val guava = "com.google.guava:guava"
  val guavaBom = "com.google.guava:guava-bom:32.1.1-jre"
  val guavaTestLib = "com.google.guava:guava-testlib"
  val guice = "com.google.inject:guice"
  val guiceBom = "com.google.inject:guice-bom:6.0.0"
  val guiceTestLib = "com.google.inject.extensions:guice-testlib"
  val hibernateCore = "org.hibernate:hibernate-core:5.5.3.Final"
  val hikariCp = "com.zaxxer:HikariCP:4.0.3"
  val hsqldb = "org.hsqldb:hsqldb:2.6.1"
  val jCommander = "com.beust:jcommander:1.72"
  val jacksonAnotations = "com.fasterxml.jackson.core:jackson-annotations:2.14.2"
  val jacksonBom = "com.fasterxml.jackson:jackson-bom:2.14.2"
  val jacksonCore = "com.fasterxml.jackson.core:jackson-core:2.14.2"
  val jacksonDatabind = "com.fasterxml.jackson.core:jackson-databind:2.14.2"
  val jacksonDataformatYaml = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2"
  val jacksonJsr310 = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2"
  val jacksonKotlin = "com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2"
  val javaxAnnotation = "javax.annotation:javax.annotation-api:1.3.2"
  val javaxInject = "javax.inject:javax.inject:1"
  val javaxPersistenceApi = "javax.persistence:javax.persistence-api:2.2"
  val jedis = "redis.clients:jedis:4.1.1"
  val jerseyBom = "org.glassfish.jersey:jersey-bom:3.0.2"
  val jettyAlpnServer = "org.eclipse.jetty:jetty-alpn-server"
  val jettyAlpnServerJava = "org.eclipse.jetty:jetty-alpn-java-server"
  val jettyBom = "org.eclipse.jetty:jetty-bom:10.0.14"
  val jettyHttp = "org.eclipse.jetty:jetty-http"
  val jettyHttp2 = "org.eclipse.jetty.http2:http2-server"
  val jettyHttp2Common = "org.eclipse.jetty.http2:http2-common"
  val jettyIo = "org.eclipse.jetty:jetty-io"
  val jettyServer = "org.eclipse.jetty:jetty-server"
  val jettyServlet = "org.eclipse.jetty:jetty-servlet"
  val jettyServletApi = "org.eclipse.jetty.toolchain:jetty-servlet-api:4.0.6"
  val jettyServlets = "org.eclipse.jetty:jetty-servlets"
  val jettyUnixSocket = "org.eclipse.jetty:jetty-unixsocket-server"
  val jettyUtil = "org.eclipse.jetty:jetty-util"
  val jettyWebsocketApi = "org.eclipse.jetty.websocket:websocket-jetty-api"
  val jettyWebsocketServer = "org.eclipse.jetty.websocket:websocket-jetty-server"
  val jgit = "org.eclipse.jgit:org.eclipse.jgit:5.12.0.202106070339-r"
  val jooq = "org.jooq:jooq:3.18.2"
  val junitApi = "org.junit.jupiter:junit-jupiter-api:5.9.3"
  val junitEngine = "org.junit.jupiter:junit-jupiter-engine:5.9.3"
  val junitGradlePlugin = "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
  val junitParams = "org.junit.jupiter:junit-jupiter-params:5.9.3"
  val kotlinAllOpenPlugin = "org.jetbrains.kotlin:kotlin-allopen:1.8.21"
  val kotlinBinaryCompatibilityPluginVersion = "0.13.1"
  val kotlinBom = "org.jetbrains.kotlin:kotlin-bom:1.8.21"
  val kotlinGradlePlugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.21"
  val kotlinLogging = "io.github.microutils:kotlin-logging:3.0.5"
  val kotlinNoArgPlugin = "org.jetbrains.kotlin:kotlin-noarg:1.8.21"
  val kotlinReflect = "org.jetbrains.kotlin:kotlin-reflect:1.8.21"
  val kotlinRetry = "com.michael-bull.kotlin-retry:kotlin-retry:1.0.9"
  val kotlinStdLibJdk8 = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.21"
  val kotlinTest = "org.jetbrains.kotlin:kotlin-test:1.8.21"
  val kotlinxCoroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.0"
  val kotlinxHtml = "org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.1"
  val kubernetesClient = "io.kubernetes:client-java:14.0.0"
  val kubernetesClientApi = "io.kubernetes:client-java-api:14.0.0"
  val launchDarkly = "com.launchdarkly:launchdarkly-java-server-sdk:5.10.7"
  val logbackClassic = "ch.qos.logback:logback-classic:1.4.7"
  val logbackCore = "ch.qos.logback:logback-core:1.4.7"
  val mavenPublishGradlePlugin = "com.vanniktech:gradle-maven-publish-plugin:0.25.2"
  val micrometerCore = "io.micrometer:micrometer-core:1.11.0"
  val mockitoCore = "org.mockito:mockito-core:5.3.1"
  val moshi = "com.squareup.moshi:moshi:1.14.0"
  val moshiAdapters = "com.squareup.moshi:moshi-adapters:1.14.0"
  val mysql = "mysql:mysql-connector-java:8.0.21"
  val nettyBom = "io.netty:netty-bom:4.1.92.Final"
  val nettyHandler = "io.netty:netty-handler:4.1.92.Final"
  val okHttp = "com.squareup.okhttp3:okhttp:4.11.0"
  val okHttpMockWebServer = "com.squareup.okhttp3:mockwebserver:4.11.0"
  val okio = "com.squareup.okio:okio:3.3.0"
  val openTracingApi = "io.opentracing:opentracing-api:0.33.0"
  val openTracingConcurrent = "io.opentracing.contrib:opentracing-concurrent:0.4.0"
  val openTracingDatadog = "com.datadoghq:dd-trace-ot:1.12.1"
  val openTracingJdbc = "io.opentracing.contrib:opentracing-jdbc:0.2.15"
  val openTracingMock = "io.opentracing:opentracing-mock:0.33.0"
  val openTracingOkHttp = "io.opentracing.contrib:opentracing-okhttp3:3.0.0"
  val openTracingUtil = "io.opentracing:opentracing-util:0.33.0"
  val postgresql = "org.postgresql:postgresql:42.2.23"
  val prometheusClient = "io.prometheus:simpleclient:0.16.0"
  val prometheusClientBom = "io.prometheus:simpleclient_bom:0.16.0"
  val prometheusHotspot = "io.prometheus:simpleclient_hotspot:0.16.0"
  val prometheusHttpserver = "io.prometheus:simpleclient_httpserver:0.16.0"
  val protoGoogleCommon = "com.google.api.grpc:proto-google-common-protos:2.9.0"
  val protobufGradlePlugin = "com.google.protobuf:protobuf-gradle-plugin:0.9.3"
  val protobufJava = "com.google.protobuf:protobuf-java:3.21.7"
  val protoc = "com.google.protobuf:protoc:3.19.2"
  val retrofit = "com.squareup.retrofit2:retrofit:2.9.0"
  val retrofitMock = "com.squareup.retrofit2:retrofit-mock:2.9.0"
  val retrofitMoshi = "com.squareup.retrofit2:converter-moshi:2.9.0"
  val retrofitProtobuf = "com.squareup.retrofit2:converter-protobuf:2.9.0"
  val retrofitScalars = "com.squareup.retrofit2:converter-scalars:2.9.0"
  val retrofitWire = "com.squareup.retrofit2:converter-wire:2.9.0"
  val servletApi = "javax.servlet:javax.servlet-api:3.1.0"
  val slf4jApi = "org.slf4j:slf4j-api:2.0.7"
  val tempest2Testing = "app.cash.tempest:tempest2-testing:1.7.0"
  val tempest2TestingDocker = "app.cash.tempest:tempest2-testing-docker:1.7.0"
  val tempest2TestingInternal = "app.cash.tempest:tempest2-testing-internal:1.7.0"
  val tempest2TestingJvm = "app.cash.tempest:tempest2-testing-jvm:1.7.0"
  val tempestTesting = "app.cash.tempest:tempest-testing:1.7.0"
  val tempestTestingDocker = "app.cash.tempest:tempest-testing-docker:1.7.0"
  val tempestTestingInternal = "app.cash.tempest:tempest-testing-internal:1.7.0"
  val tempestTestingJvm = "app.cash.tempest:tempest-testing-jvm:1.7.0"
  val tink = "com.google.crypto.tink:tink:1.6.1"
  val tinkAwskms = "com.google.crypto.tink:tink-awskms:1.6.1"
  val tinkGcpkms = "com.google.crypto.tink:tink-gcpkms:1.6.1"
  val tracingDatadog = "com.datadoghq:dd-trace-api:1.12.1"
  val wireBom = "com.squareup.wire:wire-bom:4.6.2"
  val wireGradlePlugin = "com.squareup.wire:wire-gradle-plugin:4.6.2"
  val wireGrpcClient = "com.squareup.wire:wire-grpc-client:4.6.2"
  val wireMoshiAdapter = "com.squareup.wire:wire-moshi-adapter:4.6.2"
  val wireReflector = "com.squareup.wire:wire-reflector:4.6.2"
  val wireRuntime = "com.squareup.wire:wire-runtime:4.6.2"
  val wireSchema = "com.squareup.wire:wire-schema:4.6.2"
  val wispAwsEnvironment = "app.cash.wisp:wisp-aws-environment"
  val wispBom = "app.cash.wisp:wisp-bom:1.4.7"
  val wispClient = "app.cash.wisp:wisp-client"
  val wispConfig = "app.cash.wisp:wisp-config"
  val wispContainersTesting = "app.cash.wisp:wisp-containers-testing"
  val wispDeployment = "app.cash.wisp:wisp-deployment"
  val wispDeploymentTesting = "app.cash.wisp:wisp-deployment-testing"
  val wispFeature = "app.cash.wisp:wisp-feature"
  val wispFeatureTesting = "app.cash.wisp:wisp-feature-testing"
  val wispLaunchDarkly = "app.cash.wisp:wisp-launchdarkly"
  val wispLease = "app.cash.wisp:wisp-lease"
  val wispLeaseTesting = "app.cash.wisp:wisp-lease-testing"
  val wispLogging = "app.cash.wisp:wisp-logging"
  val wispLoggingTesting = "app.cash.wisp:wisp-logging-testing"
  val wispMoshi = "app.cash.wisp:wisp-moshi"
  val wispResourceLoader = "app.cash.wisp:wisp-resource-loader"
  val wispResourceLoaderTesting = "app.cash.wisp:wisp-resource-loader-testing"
  val wispSsl = "app.cash.wisp:wisp-ssl"
  val wispTimeTesting = "app.cash.wisp:wisp-time-testing"
  val wispToken = "app.cash.wisp:wisp-token"
  val wispTokenTesting = "app.cash.wisp:wisp-token-testing"
  val wispTracing = "app.cash.wisp:wisp-tracing"
}
