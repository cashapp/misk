public final class misk/jooq/IsolationLevelAwareConnectionProvider : org/jooq/ConnectionProvider {
	public fun <init> (Lorg/jooq/impl/DataSourceConnectionProvider;Lmisk/jooq/JooqTransacter$TransacterOptions;)V
	public fun acquire ()Ljava/sql/Connection;
	public fun release (Ljava/sql/Connection;)V
}

public final class misk/jooq/JooqExtensionsKt {
	public static final fun fetchOneOrNull (Lorg/jooq/ResultQuery;)Lorg/jooq/Record;
	public static final fun getOrThrow (Ljava/lang/Object;)Ljava/lang/Object;
	public static final fun ifNotNull (Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)Lorg/jooq/Condition;
	public static final fun toInstant (Ljava/time/LocalDateTime;)Ljava/time/Instant;
	public static final fun toLocalDateTime (Ljava/time/Instant;)Ljava/time/LocalDateTime;
}

public final class misk/jooq/JooqHealthCheck : misk/healthchecks/HealthCheck {
	public static final field Companion Lmisk/jooq/JooqHealthCheck$Companion;
	public fun <init> (Lkotlin/reflect/KClass;Lcom/google/inject/Provider;Lcom/google/inject/Provider;Ljava/time/Clock;)V
	public fun status ()Lmisk/healthchecks/HealthStatus;
}

public final class misk/jooq/JooqHealthCheck$Companion {
	public final fun getCLOCK_SKEW_UNHEALTHY_THRESHOLD ()Ljava/time/Duration;
	public final fun getCLOCK_SKEW_WARN_THRESHOLD ()Ljava/time/Duration;
	public final fun getLog ()Lmu/KLogger;
}

public final class misk/jooq/JooqModule : misk/inject/KAbstractModule {
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;Z)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;ZZ)V
	public fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;ZZLkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lkotlin/reflect/KClass;Lmisk/jdbc/DataSourceClusterConfig;Ljava/lang/String;Lmisk/jdbc/DatabasePool;Lkotlin/reflect/KClass;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;ZZLkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class misk/jooq/JooqSession : misk/jdbc/Session {
	public fun <init> (Lorg/jooq/DSLContext;)V
	public final fun add (Ljava/util/concurrent/ConcurrentMap;Lmisk/jooq/JooqSession$HookType;Lkotlin/jvm/functions/Function0;)V
	public final fun component1 ()Lorg/jooq/DSLContext;
	public final fun executePostCommitHooks ()V
	public final fun executePreCommitHooks ()V
	public final fun executeRollbackHooks (Ljava/lang/Throwable;)V
	public final fun executeSessionCloseHooks ()V
	public final fun getCtx ()Lorg/jooq/DSLContext;
	public fun onPostCommit (Lkotlin/jvm/functions/Function0;)V
	public fun onPreCommit (Lkotlin/jvm/functions/Function0;)V
	public fun onRollback (Lkotlin/jvm/functions/Function1;)V
	public fun onSessionClose (Lkotlin/jvm/functions/Function0;)V
	public fun useConnection (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public final class misk/jooq/JooqSession$HookType : java/lang/Enum {
	public static final field POST Lmisk/jooq/JooqSession$HookType;
	public static final field PRE Lmisk/jooq/JooqSession$HookType;
	public static final field SESSION_CLOSE Lmisk/jooq/JooqSession$HookType;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Lmisk/jooq/JooqSession$HookType;
	public static fun values ()[Lmisk/jooq/JooqSession$HookType;
}

public final class misk/jooq/JooqTransacter {
	public static final field Companion Lmisk/jooq/JooqTransacter$Companion;
	public fun <init> (Lmisk/jdbc/DataSourceService;Lmisk/jdbc/DataSourceConfig;Ljava/lang/String;Ljava/time/Clock;)V
	public fun <init> (Lmisk/jdbc/DataSourceService;Lmisk/jdbc/DataSourceConfig;Ljava/lang/String;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;Ljava/time/Clock;)V
	public fun <init> (Lmisk/jdbc/DataSourceService;Lmisk/jdbc/DataSourceConfig;Ljava/lang/String;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;Ljava/time/Clock;Lkotlin/jvm/functions/Function1;)V
	public synthetic fun <init> (Lmisk/jdbc/DataSourceService;Lmisk/jdbc/DataSourceConfig;Ljava/lang/String;Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;Ljava/time/Clock;Lkotlin/jvm/functions/Function1;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun transaction (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public final fun transaction (Lmisk/jooq/JooqTransacter$TransacterOptions;Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
	public static synthetic fun transaction$default (Lmisk/jooq/JooqTransacter;Lmisk/jooq/JooqTransacter$TransacterOptions;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/Object;
}

public final class misk/jooq/JooqTransacter$Companion {
	public final fun getNoRetriesOptions ()Lmisk/jooq/JooqTransacter$TransacterOptions;
}

public final class misk/jooq/JooqTransacter$TransacterOptions {
	public fun <init> ()V
	public fun <init> (I)V
	public fun <init> (IJ)V
	public fun <init> (IJLmisk/jooq/TransactionIsolationLevel;)V
	public synthetic fun <init> (IJLmisk/jooq/TransactionIsolationLevel;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()J
	public final fun component3 ()Lmisk/jooq/TransactionIsolationLevel;
	public final fun copy (IJLmisk/jooq/TransactionIsolationLevel;)Lmisk/jooq/JooqTransacter$TransacterOptions;
	public static synthetic fun copy$default (Lmisk/jooq/JooqTransacter$TransacterOptions;IJLmisk/jooq/TransactionIsolationLevel;ILjava/lang/Object;)Lmisk/jooq/JooqTransacter$TransacterOptions;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getIsolationLevel ()Lmisk/jooq/TransactionIsolationLevel;
	public final fun getMaxAttempts ()I
	public final fun getMaxRetryDelayMillis ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class misk/jooq/TransactionIsolationLevel : java/lang/Enum {
	public static final field READ_COMMITTED Lmisk/jooq/TransactionIsolationLevel;
	public static final field READ_UNCOMMITTED Lmisk/jooq/TransactionIsolationLevel;
	public static final field REPEATABLE_READ Lmisk/jooq/TransactionIsolationLevel;
	public static final field SERIALIZABLE Lmisk/jooq/TransactionIsolationLevel;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public final fun getValue ()I
	public static fun valueOf (Ljava/lang/String;)Lmisk/jooq/TransactionIsolationLevel;
	public static fun values ()[Lmisk/jooq/TransactionIsolationLevel;
}

public final class misk/jooq/listeners/AvoidUsingSelectStarException : java/lang/RuntimeException {
	public fun <init> (Ljava/lang/String;)V
}

public final class misk/jooq/listeners/AvoidUsingSelectStarListener : org/jooq/ExecuteListener {
	public static final field Companion Lmisk/jooq/listeners/AvoidUsingSelectStarListener$Companion;
	public fun <init> ()V
	public fun renderEnd (Lorg/jooq/ExecuteContext;)V
}

public final class misk/jooq/listeners/AvoidUsingSelectStarListener$Companion {
	public final fun getSelectStarFromRegex ()Lkotlin/text/Regex;
}

public final class misk/jooq/listeners/DataIntegrityException : org/jooq/exception/DataAccessException {
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Ljava/lang/String;Ljava/lang/Exception;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Exception;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public final class misk/jooq/listeners/JooqSQLLogger : org/jooq/ExecuteListener {
	public static final field Companion Lmisk/jooq/listeners/JooqSQLLogger$Companion;
	public fun <init> ()V
	public fun exception (Lorg/jooq/ExecuteContext;)V
	public fun executeEnd (Lorg/jooq/ExecuteContext;)V
	public fun outEnd (Lorg/jooq/ExecuteContext;)V
	public fun recordEnd (Lorg/jooq/ExecuteContext;)V
	public fun renderEnd (Lorg/jooq/ExecuteContext;)V
	public fun resultEnd (Lorg/jooq/ExecuteContext;)V
}

public final class misk/jooq/listeners/JooqSQLLogger$Companion {
	public final fun getLog ()Lmu/KLogger;
}

public final class misk/jooq/listeners/JooqTimestampRecordListener : org/jooq/RecordListener {
	public fun <init> (Ljava/time/Clock;Ljava/lang/String;Ljava/lang/String;)V
	public fun insertStart (Lorg/jooq/RecordContext;)V
	public fun updateStart (Lorg/jooq/RecordContext;)V
}

public final class misk/jooq/listeners/JooqTimestampRecordListenerOptions {
	public fun <init> (Z)V
	public fun <init> (ZLjava/lang/String;)V
	public fun <init> (ZLjava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (ZLjava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Z
	public final fun component2 ()Ljava/lang/String;
	public final fun component3 ()Ljava/lang/String;
	public final fun copy (ZLjava/lang/String;Ljava/lang/String;)Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;
	public static synthetic fun copy$default (Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;ZLjava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lmisk/jooq/listeners/JooqTimestampRecordListenerOptions;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getCreatedAtColumnName ()Ljava/lang/String;
	public final fun getInstall ()Z
	public final fun getUpdatedAtColumnName ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract interface class misk/jooq/listeners/RecordHasher {
	public abstract fun computeMac (Ljava/lang/String;[B)[B
	public abstract fun verifyMac (Ljava/lang/String;[B[B)V
}

public final class misk/jooq/listeners/RecordSignatureListener : org/jooq/RecordListener {
	public static final field Companion Lmisk/jooq/listeners/RecordSignatureListener$Companion;
	public fun <init> (Lmisk/jooq/listeners/RecordHasher;Ljava/util/List;)V
	public fun insertStart (Lorg/jooq/RecordContext;)V
	public fun loadEnd (Lorg/jooq/RecordContext;)V
	public fun updateStart (Lorg/jooq/RecordContext;)V
}

public final class misk/jooq/listeners/RecordSignatureListener$Companion {
	public final fun getLog ()Lmu/KLogger;
}

public final class misk/jooq/listeners/TableSignatureDetails {
	public fun <init> (Ljava/lang/String;Ljava/util/List;Lorg/jooq/TableField;Lorg/jooq/Table;Z)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()Lorg/jooq/TableField;
	public final fun component4 ()Lorg/jooq/Table;
	public final fun component5 ()Z
	public final fun copy (Ljava/lang/String;Ljava/util/List;Lorg/jooq/TableField;Lorg/jooq/Table;Z)Lmisk/jooq/listeners/TableSignatureDetails;
	public static synthetic fun copy$default (Lmisk/jooq/listeners/TableSignatureDetails;Ljava/lang/String;Ljava/util/List;Lorg/jooq/TableField;Lorg/jooq/Table;ZILjava/lang/Object;)Lmisk/jooq/listeners/TableSignatureDetails;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getAllowNullSignatures ()Z
	public final fun getColumns ()Ljava/util/List;
	public final fun getSignatureKeyName ()Ljava/lang/String;
	public final fun getSignatureRecordColumn ()Lorg/jooq/TableField;
	public final fun getTable ()Lorg/jooq/Table;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public class misk/jooq/testgen/DefaultCatalog : org/jooq/impl/CatalogImpl {
	public static final field Companion Lmisk/jooq/testgen/DefaultCatalog$Companion;
	public fun <init> ()V
	public final fun getJOOQ ()Lmisk/jooq/testgen/Jooq;
	public fun getSchemas ()Ljava/util/List;
}

public final class misk/jooq/testgen/DefaultCatalog$Companion {
	public final fun getDEFAULT_CATALOG ()Lmisk/jooq/testgen/DefaultCatalog;
}

public class misk/jooq/testgen/Jooq : org/jooq/impl/SchemaImpl {
	public static final field Companion Lmisk/jooq/testgen/Jooq$Companion;
	public fun <init> ()V
	public fun getCatalog ()Lorg/jooq/Catalog;
	public final fun getMOVIE ()Lmisk/jooq/testgen/tables/Movie;
	public final fun getRECORD_SIGNATURE_TEST ()Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public fun getTables ()Ljava/util/List;
}

public final class misk/jooq/testgen/Jooq$Companion {
	public final fun getJOOQ ()Lmisk/jooq/testgen/Jooq;
}

public final class misk/jooq/testgen/keys/KeysKt {
	public static final fun getKEY_MOVIE_PRIMARY ()Lorg/jooq/UniqueKey;
	public static final fun getKEY_RECORD_SIGNATURE_TEST_PRIMARY ()Lorg/jooq/UniqueKey;
}

public class misk/jooq/testgen/tables/Movie : org/jooq/impl/TableImpl {
	public static final field Companion Lmisk/jooq/testgen/tables/Movie$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Lorg/jooq/Name;)V
	public fun <init> (Lorg/jooq/Name;Lorg/jooq/Table;Lorg/jooq/ForeignKey;Lorg/jooq/InverseForeignKey;Lorg/jooq/Table;[Lorg/jooq/Field;Lorg/jooq/Condition;)V
	public fun as (Ljava/lang/String;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun as (Ljava/lang/String;)Lorg/jooq/SelectField;
	public synthetic fun as (Ljava/lang/String;)Lorg/jooq/Table;
	public fun as (Lorg/jooq/Name;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun as (Lorg/jooq/Name;)Lorg/jooq/SelectField;
	public synthetic fun as (Lorg/jooq/Name;)Lorg/jooq/Table;
	public fun as (Lorg/jooq/Table;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun as (Lorg/jooq/Table;)Lorg/jooq/Table;
	public final fun getCREATED_AT ()Lorg/jooq/TableField;
	public final fun getGENRE ()Lorg/jooq/TableField;
	public final fun getID ()Lorg/jooq/TableField;
	public fun getIdentity ()Lorg/jooq/Identity;
	public final fun getNAME ()Lorg/jooq/TableField;
	public fun getPrimaryKey ()Lorg/jooq/UniqueKey;
	public fun getRecordType ()Ljava/lang/Class;
	public fun getRecordVersion ()Lorg/jooq/TableField;
	public fun getSchema ()Lorg/jooq/Schema;
	public final fun getUPDATED_AT ()Lorg/jooq/TableField;
	public final fun getVERSION ()Lorg/jooq/TableField;
	public fun rename (Ljava/lang/String;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun rename (Ljava/lang/String;)Lorg/jooq/Table;
	public fun rename (Lorg/jooq/Name;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun rename (Lorg/jooq/Name;)Lorg/jooq/Table;
	public fun rename (Lorg/jooq/Table;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun rename (Lorg/jooq/Table;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Ljava/lang/String;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;[Ljava/lang/Object;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Ljava/lang/String;[Ljava/lang/Object;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;[Lorg/jooq/QueryPart;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Ljava/lang/String;[Lorg/jooq/QueryPart;)Lorg/jooq/Table;
	public fun where (Ljava/util/Collection;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Ljava/util/Collection;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/Condition;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Lorg/jooq/Condition;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/Field;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Lorg/jooq/Field;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/SQL;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where (Lorg/jooq/SQL;)Lorg/jooq/Table;
	public fun where ([Lorg/jooq/Condition;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun where ([Lorg/jooq/Condition;)Lorg/jooq/Table;
	public fun whereExists (Lorg/jooq/Select;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun whereExists (Lorg/jooq/Select;)Lorg/jooq/Table;
	public fun whereNotExists (Lorg/jooq/Select;)Lmisk/jooq/testgen/tables/Movie;
	public synthetic fun whereNotExists (Lorg/jooq/Select;)Lorg/jooq/Table;
}

public final class misk/jooq/testgen/tables/Movie$Companion {
	public final fun getMOVIE ()Lmisk/jooq/testgen/tables/Movie;
}

public class misk/jooq/testgen/tables/RecordSignatureTest : org/jooq/impl/TableImpl {
	public static final field Companion Lmisk/jooq/testgen/tables/RecordSignatureTest$Companion;
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;)V
	public fun <init> (Lorg/jooq/Name;)V
	public fun <init> (Lorg/jooq/Name;Lorg/jooq/Table;Lorg/jooq/ForeignKey;Lorg/jooq/InverseForeignKey;Lorg/jooq/Table;[Lorg/jooq/Field;Lorg/jooq/Condition;)V
	public fun as (Ljava/lang/String;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun as (Ljava/lang/String;)Lorg/jooq/SelectField;
	public synthetic fun as (Ljava/lang/String;)Lorg/jooq/Table;
	public fun as (Lorg/jooq/Name;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun as (Lorg/jooq/Name;)Lorg/jooq/SelectField;
	public synthetic fun as (Lorg/jooq/Name;)Lorg/jooq/Table;
	public fun as (Lorg/jooq/Table;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun as (Lorg/jooq/Table;)Lorg/jooq/Table;
	public final fun getBINARY_DATA ()Lorg/jooq/TableField;
	public final fun getCREATED_AT ()Lorg/jooq/TableField;
	public final fun getCREATED_BY ()Lorg/jooq/TableField;
	public final fun getID ()Lorg/jooq/TableField;
	public fun getIdentity ()Lorg/jooq/Identity;
	public final fun getNAME ()Lorg/jooq/TableField;
	public fun getPrimaryKey ()Lorg/jooq/UniqueKey;
	public final fun getRECORD_SIGNATURE ()Lorg/jooq/TableField;
	public fun getRecordType ()Ljava/lang/Class;
	public fun getSchema ()Lorg/jooq/Schema;
	public final fun getUPDATED_AT ()Lorg/jooq/TableField;
	public final fun getUPDATED_BY ()Lorg/jooq/TableField;
	public fun rename (Ljava/lang/String;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun rename (Ljava/lang/String;)Lorg/jooq/Table;
	public fun rename (Lorg/jooq/Name;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun rename (Lorg/jooq/Name;)Lorg/jooq/Table;
	public fun rename (Lorg/jooq/Table;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun rename (Lorg/jooq/Table;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Ljava/lang/String;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;[Ljava/lang/Object;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Ljava/lang/String;[Ljava/lang/Object;)Lorg/jooq/Table;
	public fun where (Ljava/lang/String;[Lorg/jooq/QueryPart;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Ljava/lang/String;[Lorg/jooq/QueryPart;)Lorg/jooq/Table;
	public fun where (Ljava/util/Collection;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Ljava/util/Collection;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/Condition;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Lorg/jooq/Condition;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/Field;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Lorg/jooq/Field;)Lorg/jooq/Table;
	public fun where (Lorg/jooq/SQL;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where (Lorg/jooq/SQL;)Lorg/jooq/Table;
	public fun where ([Lorg/jooq/Condition;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun where ([Lorg/jooq/Condition;)Lorg/jooq/Table;
	public fun whereExists (Lorg/jooq/Select;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun whereExists (Lorg/jooq/Select;)Lorg/jooq/Table;
	public fun whereNotExists (Lorg/jooq/Select;)Lmisk/jooq/testgen/tables/RecordSignatureTest;
	public synthetic fun whereNotExists (Lorg/jooq/Select;)Lorg/jooq/Table;
}

public final class misk/jooq/testgen/tables/RecordSignatureTest$Companion {
	public final fun getRECORD_SIGNATURE_TEST ()Lmisk/jooq/testgen/tables/RecordSignatureTest;
}

public class misk/jooq/testgen/tables/records/MovieRecord : org/jooq/impl/UpdatableRecordImpl {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V
	public synthetic fun <init> (Ljava/lang/Long;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Integer;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getCreatedAt ()Ljava/time/LocalDateTime;
	public fun getGenre ()Ljava/lang/String;
	public fun getId ()Ljava/lang/Long;
	public fun getName ()Ljava/lang/String;
	public fun getUpdatedAt ()Ljava/time/LocalDateTime;
	public fun getVersion ()Ljava/lang/Integer;
	public fun key ()Lorg/jooq/Record1;
	public synthetic fun key ()Lorg/jooq/Record;
	public fun setCreatedAt (Ljava/time/LocalDateTime;)V
	public fun setGenre (Ljava/lang/String;)V
	public fun setId (Ljava/lang/Long;)V
	public fun setName (Ljava/lang/String;)V
	public fun setUpdatedAt (Ljava/time/LocalDateTime;)V
	public fun setVersion (Ljava/lang/Integer;)V
}

public class misk/jooq/testgen/tables/records/RecordSignatureTestRecord : org/jooq/impl/UpdatableRecordImpl {
	public fun <init> ()V
	public fun <init> (Ljava/lang/Long;Ljava/lang/String;[BLjava/lang/String;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;[B)V
	public synthetic fun <init> (Ljava/lang/Long;Ljava/lang/String;[BLjava/lang/String;Ljava/lang/String;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;[BILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getBinaryData ()[B
	public fun getCreatedAt ()Ljava/time/LocalDateTime;
	public fun getCreatedBy ()Ljava/lang/String;
	public fun getId ()Ljava/lang/Long;
	public fun getName ()Ljava/lang/String;
	public fun getRecordSignature ()[B
	public fun getUpdatedAt ()Ljava/time/LocalDateTime;
	public fun getUpdatedBy ()Ljava/lang/String;
	public fun key ()Lorg/jooq/Record1;
	public synthetic fun key ()Lorg/jooq/Record;
	public fun setBinaryData ([B)V
	public fun setCreatedAt (Ljava/time/LocalDateTime;)V
	public fun setCreatedBy (Ljava/lang/String;)V
	public fun setId (Ljava/lang/Long;)V
	public fun setName (Ljava/lang/String;)V
	public fun setRecordSignature ([B)V
	public fun setUpdatedAt (Ljava/time/LocalDateTime;)V
	public fun setUpdatedBy (Ljava/lang/String;)V
}

public final class misk/jooq/testgen/tables/references/TablesKt {
	public static final fun getMOVIE ()Lmisk/jooq/testgen/tables/Movie;
	public static final fun getRECORD_SIGNATURE_TEST ()Lmisk/jooq/testgen/tables/RecordSignatureTest;
}

