buildscript {
  dependencies {
    classpath dep.protobufGradlePlugin
  }
}

apply plugin: 'com.google.protobuf'

protobuf {
  plugins {
    grpc {
      artifact = dep.grpcGenJava
    }
  }
  protoc {
    artifact = dep.protoc
  }

  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc {}
    }
  }
}

tasks.register("generateKotlinProtos", JavaExec) {
  def kotlin = file('kotlin.txt').readLines()
  def prefix = '+[Kotlin]'
  def includes = kotlin.findAll { it.startsWith(prefix) }.collect { it.substring(prefix.length()) }

  doFirst {
    println "INCLUDE:\n * ${includes.join('\n * ')}"
    println ''
  }

  classpath = configurations.wire
  main = 'com.squareup.wire.WireCompiler'
  args = [
          '--proto_path=src/main/proto',
          '--kotlin_out=src/main/kotlin',
          '--includes=' + includes.join(',')
  ]
}

sourceSets {
  main.java.srcDirs += 'build/generated/source/proto/main/grpc'
  main.java.srcDirs += 'build/generated/source/proto/main/java'
}

configurations {
  wire
}

dependencies {
  compile dep.junitApi
  compile dep.docker
  compile dep.grpcNetty
  compile dep.grpcProtobuf
  compile dep.grpcStub
  compile dep.wireGrpcClient
  compile project(':misk')
  compile project(':misk-testing')
  wire dep.wireCompiler
}
