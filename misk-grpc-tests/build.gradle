buildscript {
  dependencies {
    classpath dep.protobufGradlePlugin
  }
}

apply plugin: 'com.google.protobuf'
apply plugin: 'com.squareup.wire'

protobuf {
  plugins {
    grpc {
      artifact = dep.grpcGenJava
    }
  }

  protoc {
    artifact = dep.protoc
  }

  generateProtoTasks {
    ofSourceSet('main')*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options.  Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc {}
    }
  }
}

wire {
  kotlin {
    rpcRole = 'client'
    javaInterop = true
  }

  // Generate service interfaces also.
  kotlin {
    includes = ['routeguide.RouteGuide']
    exclusive = false
    rpcRole = 'server'
    rpcCallStyle = 'blocking'
    singleMethodServices = true
  }
}

sourceSets {
  main.java.srcDirs += 'build/generated/source/proto/main/grpc'
  main.java.srcDirs += 'build/generated/source/proto/main/java'

  // TODO(jwilson): we do this to make IntelliJ happy but the Wire Gradle plugin should do that.
  main.java.srcDirs += 'build/generated/source/wire'
}

dependencies {
  implementation dep.assertj
  implementation dep.junitApi
  implementation dep.kotlinTest
  implementation dep.docker
  implementation dep.guice
  implementation dep.grpcNetty
  implementation dep.grpcProtobuf
  implementation dep.grpcStub
  implementation dep.kotlinxCoroutines
  implementation dep.wireGrpcClient
  implementation dep.wireRuntime
  implementation project(':misk')
  implementation project(':misk-actions')
  implementation project(':misk-core')
  implementation project(':misk-inject')
  implementation project(':misk-service')
  implementation project(':misk-testing')

  testImplementation dep.logbackClassic
}

afterEvaluate { project ->
  project.tasks.dokka {
    outputDirectory = "$rootDir/docs/0.x"
    outputFormat = 'gfm'
  }
}

apply from: "$rootDir/gradle-mvn-publish.gradle"
