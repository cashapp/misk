[versions]
awaitility = "4.2.2"
aws1 = "1.12.770"
aws2 = "2.27.14"
bucket4j = "8.8.0"
datadog = "1.38.1"
dependencyAnalysisPlugin = "1.29.0"
detekt = "1.23.6"
docker = "3.4.0"
flyway = "9.14.1"
googleAuth = "1.24.1"
googleHttp = "1.45.0"
hoplite = "2.7.5"
jackson = "2.17.2"
junit = "5.11.0"
kotest = "5.9.1"
kotlin = "1.9.25"
kotlinBinaryCompatibilityPlugin = "0.16.3"
mavenPublish = "0.27.0"
micrometer = "1.12.9"
netty = "4.1.112.Final"
okHttp = "5.0.0-alpha.13"
protobuf = "3.25.4"
protobufPlugin = "0.9.4"
retrofit = "2.11.0"
sqldelight = "2.0.0"
wire = "5.0.0"

[libraries]
apacheCommonsLang = { module = "org.apache.commons:commons-lang3", version = "3.16.0" }
apacheCommonsPool = { module = "org.apache.commons:commons-pool2", version = "2.12.0" }
apacheCommonsIo = { module = "commons-io:commons-io", version = "2.16.1" }
assertj = { module = "org.assertj:assertj-core", version = "3.26.3" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
awaitilityKotlin = { module = "org.awaitility:awaitility-kotlin", version.ref = "awaitility" }
aws2Auth = { module = "software.amazon.awssdk:auth", version.ref = "aws2" }
aws2Bom = { module = "software.amazon.awssdk:bom", version.ref = "aws2" }
aws2Dynamodb = { module = "software.amazon.awssdk:dynamodb", version.ref = "aws2" }
aws2DynamodbEnhanced = { module = "software.amazon.awssdk:dynamodb-enhanced", version.ref = "aws2" }
aws2Regions = { module = "software.amazon.awssdk:regions" }
awsDynamodb = { module = "com.amazonaws:aws-java-sdk-dynamodb", version.ref = "aws1" }
awsS3 = { module = "com.amazonaws:aws-java-sdk-s3", version.ref = "aws1" }
awsSdkAwsCore= { module = "software.amazon.awssdk:aws-core", version.ref = "aws2" }
awsSdkCore = { module = "com.amazonaws:aws-java-sdk-core", version.ref = "aws1" }
awsSdkSdkCore = { module = "software.amazon.awssdk:sdk-core", version.ref = "aws2" }
awsSqs = { module = "com.amazonaws:aws-java-sdk-sqs", version.ref = "aws1" }
bouncycastle = { module = "org.bouncycastle:bcprov-jdk15on", version = "1.70" }
bouncycastlePgp = { module = "org.bouncycastle:bcpg-jdk15on", version = "1.70" }
bucket4jCore = { module = "com.bucket4j:bucket4j-core", version.ref = "bucket4j" }
bucket4jDynamoDbV1 = { module = "com.bucket4j:bucket4j-dynamodb-sdk-v1", version = "8.6.0" }
bucket4jMySQL = { module = "com.bucket4j:bucket4j-mysql", version.ref = "bucket4j" }
bucket4jRedis = { module = "com.bucket4j:bucket4j-redis", version.ref = "bucket4j" }
concurrencyLimitsCore = { module = "com.netflix.concurrency-limits:concurrency-limits-core", version = "0.5.1" }
cronUtils = { module = "com.cronutils:cron-utils", version = "9.2.1" }
datasourceProxy = { module = "net.ttddyy:datasource-proxy", version = "1.10" }
detektApi = { module = "io.gitlab.arturbosch.detekt:detekt-api", version.ref = "detekt" }
detektParser = { module = "io.gitlab.arturbosch.detekt:detekt-parser", version.ref = "detekt" }
detektGradlePlugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }
detektPsiUtils = { module = "io.gitlab.arturbosch.detekt:detekt-psi-utils", version.ref = "detekt" }
detektTest = { module = "io.gitlab.arturbosch.detekt:detekt-test", version.ref = "detekt" }
detektTestUtils = { module = "io.gitlab.arturbosch.detekt:detekt-test-utils", version.ref = "detekt" }
dockerApi = { module = "com.github.docker-java:docker-java-api", version.ref = "docker" }
dockerCore = { module = "com.github.docker-java:docker-java-core", version.ref = "docker" }
dockerTransport = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "docker" }
dockerTransportCore = { module = "com.github.docker-java:docker-java-transport", version.ref = "docker" }
dokkaGradlePlugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version = "1.9.20" }
errorproneAnnotations = { module = "com.google.errorprone:error_prone_annotations", version = "2.31.0" }
findbugsJsr305 = { module = "com.google.code.findbugs:jsr305", version = "3.0.2" }
flywayGradlePlugin = { module = "org.flywaydb:flyway-gradle-plugin", version.ref = "flyway" }
gax = { module = "com.google.api:gax", version = "2.52.0" }
gcpCloudCore = { module = "com.google.cloud:google-cloud-core", version = "1.95.4" }
gcpCloudStorage = { module = "com.google.cloud:google-cloud-storage", version = "1.117.1" }
gcpDatastore = { module = "com.google.cloud:google-cloud-datastore", version = "2.2.10" }
gcpKms = { module = "com.google.apis:google-api-services-cloudkms", version ="v1-rev20210622-1.31.5" }
gcpLogback = { module = "com.google.cloud:google-cloud-logging-logback", version = "0.130.11-alpha" }
gcpLogging = { module = "com.google.cloud:google-cloud-logging", version = "2.3.2" }
gcpSpanner = { module = "com.google.cloud:google-cloud-spanner", version = "6.74.0" }
googleApiClient = { module = "com.google.api-client:google-api-client", version = "1.35.0" }
googleApiServicesStorage = { module = "com.google.apis:google-api-services-storage", version = "v1-rev20210127-1.31.5" }
googleAuthLibraryCredentials = { module = "com.google.auth:google-auth-library-credentials", version.ref = "googleAuth" }
googleAuthLibraryOauth2 = { module = "com.google.auth:google-auth-library-oauth2-http", version.ref = "googleAuth" }
googleCloudCoreHttp = { module = "com.google.cloud:google-cloud-core-http", version = "1.96.1" }
googleHttpClient = { module = "com.google.http-client:google-http-client", version.ref = "googleHttp" }
googleHttpClientJackson = { module = "com.google.http-client:google-http-client-jackson2", version.ref = "googleHttp" }
grpcApi = { module = "io.grpc:grpc-api", version = "1.60.0" }
grpcBom = { module = "io.grpc:grpc-bom", version = "1.60.0" }
grpcGenJava = { module = "io.grpc:protoc-gen-grpc-java", version = "1.60.0" }
grpcNetty = { module = "io.grpc:grpc-netty", version = "1.60.0" }
grpcProtobuf = { module = "io.grpc:grpc-protobuf", version = "1.60.0" }
grpcStub = { module = "io.grpc:grpc-stub", version = "1.60.0" }
guava = { module = "com.google.guava:guava" }
guavaBom = { module = "com.google.guava:guava-bom", version = "33.3.0-jre" }
guavaTestLib = { module = "com.google.guava:guava-testlib" }
guice = { module = "com.google.inject:guice" }
guiceBom = { module = "com.google.inject:guice-bom", version = "6.0.0" }
guice7Bom = { module = "com.google.inject:guice-bom", version = "7.0.0" }
guiceTestLib = { module = "com.google.inject.extensions:guice-testlib" }
hibernateCore = { module = "org.hibernate:hibernate-core", version = "5.6.15.Final" }
hikariCp = { module = "com.zaxxer:HikariCP", version = "4.0.3" }
hopliteCore = { module = "com.sksamuel.hoplite:hoplite-core", version.ref = "hoplite" }
hopliteHocon = { module = "com.sksamuel.hoplite:hoplite-hocon", version.ref = "hoplite" }
hopliteJson = { module = "com.sksamuel.hoplite:hoplite-json", version.ref = "hoplite" }
hopliteToml = { module = "com.sksamuel.hoplite:hoplite-toml", version.ref = "hoplite" }
hopliteYaml = { module = "com.sksamuel.hoplite:hoplite-yaml", version.ref = "hoplite" }
hsqldb = { module = "org.hsqldb:hsqldb", version = "2.7.3" }
jCommander = { module = "com.beust:jcommander", version = "1.72" }
jacksonAnnotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jacksonBom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jacksonCore = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jacksonDataformatYaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jacksonJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jacksonKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
javaxAnnotation = { module = "javax.annotation:javax.annotation-api", version = "1.3.2" }
jakartaInject = { module = "jakarta.inject:jakarta.inject-api", version = "2.0.1" }
javaxInject = { module = "javax.inject:javax.inject", version = "1" }
javaxPersistenceApi = { module = "javax.persistence:javax.persistence-api", version = "2.2" }
jedis = { module = "redis.clients:jedis", version = "5.1.5" }
jerseyBom = { module = "org.glassfish.jersey:jersey-bom", version = "3.1.8" }
jetbrainsAnnotations = { module = "org.jetbrains:annotations", version = "22.0.0" }
jettyAlpnServer = { module = "org.eclipse.jetty:jetty-alpn-server" }
jettyAlpnServerJava = { module = "org.eclipse.jetty:jetty-alpn-java-server" }
jettyBom = { module = "org.eclipse.jetty:jetty-bom", version = "10.0.20" }
jettyHttp = { module = "org.eclipse.jetty:jetty-http" }
jettyHttp2 = { module = "org.eclipse.jetty.http2:http2-server" }
jettyIo = { module = "org.eclipse.jetty:jetty-io" }
jettyServer = { module = "org.eclipse.jetty:jetty-server" }
jettyServlet = { module = "org.eclipse.jetty:jetty-servlet" }
jettyServletApi = { module = "org.eclipse.jetty.toolchain:jetty-servlet-api", version = "4.0.6" }
jettyServlets = { module = "org.eclipse.jetty:jetty-servlets" }
jettyUds = { module = "org.eclipse.jetty:jetty-unixdomain-server" }
jettyUnixSocket = { module = "org.eclipse.jetty:jetty-unixsocket-server" }
jettyUtil = { module = "org.eclipse.jetty:jetty-util" }
jettyWebsocketApi = { module = "org.eclipse.jetty.websocket:websocket-jetty-api" }
jettyWebsocketServer = { module = "org.eclipse.jetty.websocket:websocket-jetty-server" }
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version = "5.13.3.202401111512-r" }
jnrUnixsocket = { module = "com.github.jnr:jnr-unixsocket", version = "0.38.22" }
jooq = { module = "org.jooq:jooq", version = "3.18.2" }
jooqGradlePlugin = { module = "nu.studer:gradle-jooq-plugin", version = "8.2" }
junitApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junitEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junitParams = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
junitPioneer = { module = "org.junit-pioneer:junit-pioneer", version = "2.2.0" }
kotestAssertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotestAssertionsShared = { module = "io.kotest:kotest-assertions-shared", version.ref = "kotest" }
kotestCommon = { module = "io.kotest:kotest-common", version.ref = "kotest" }
kotestFrameworkApi = { module = "io.kotest:kotest-framework-api", version.ref = "kotest" }
kotestJunitRunnerJvm = { module = "io.kotest:kotest-runner-junit5-jvm", version.ref = "kotest" }
kotlinAllOpenPlugin = { module = "org.jetbrains.kotlin:kotlin-allopen", version.ref = "kotlin" }
kotlinBom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlinCompilerEmbeddable = { module = "org.jetbrains.kotlin:kotlin-compiler-embeddable", version.ref = "kotlin" }
kotlinGradleBom = { module = "org.jetbrains.kotlin:kotlin-gradle-plugins-bom", version.ref = "kotlin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
kotlinLogging = { module = "io.github.microutils:kotlin-logging", version = "3.0.5" }
kotlinNoArgPlugin = { module = "org.jetbrains.kotlin:kotlin-noarg", version.ref = "kotlin" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinRetry = { module = "com.michael-bull.kotlin-retry:kotlin-retry", version = "1.0.9" }
kotlinStdLibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinxCoroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version = "1.8.1" }
kotlinxHtml = { module = "org.jetbrains.kotlinx:kotlinx-html-jvm", version = "0.11.0" }
kubernetesClient = { module = "io.kubernetes:client-java", version = "18.0.1" }
kubernetesClientApi = { module = "io.kubernetes:client-java-api", version = "18.0.1" }
launchDarkly = { module = "com.launchdarkly:launchdarkly-java-server-sdk", version = "6.3.0" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version = "1.4.14" }
logbackCore = { module = "ch.qos.logback:logback-core", version = "1.4.14" }
mavenPublishGradlePlugin = { module = "com.vanniktech:gradle-maven-publish-plugin", version.ref = "mavenPublish" }
micrometerCore = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometerRegistryPrometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "micrometer" }
mockitoCore = { module = "org.mockito:mockito-core", version = "5.13.0" }
moshiAdapters = { module = "com.squareup.moshi:moshi-adapters", version = "1.15.1" }
moshiCore = { module = "com.squareup.moshi:moshi", version = "1.15.1" }
moshiKotlin = { module = "com.squareup.moshi:moshi-kotlin", version = "1.15.1" }
mysql = { module = "com.mysql:mysql-connector-j", version = "8.4.0" }
nettyBom = { module = "io.netty:netty-bom", version.ref = "netty" }
nettyHandler = { module = "io.netty:netty-handler", version.ref = "netty" }
okHttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
okHttpMockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }
okio = { module = "com.squareup.okio:okio", version = "3.9.0" }
openTracing = { module = "io.opentracing:opentracing-api", version = "0.33.0" }
openTracingConcurrent = { module = "io.opentracing.contrib:opentracing-concurrent", version = "0.4.0" }
openTracingDatadog = { module = "com.datadoghq:dd-trace-ot", version.ref = "datadog" }
openTracingJdbc = { module = "io.opentracing.contrib:opentracing-jdbc", version = "0.2.15" }
openTracingMock = { module = "io.opentracing:opentracing-mock", version = "0.33.0" }
openTracingOkHttp = { module = "io.opentracing.contrib:opentracing-okhttp3", version = "3.0.0" }
openTracingUtil = { module = "io.opentracing:opentracing-util", version = "0.33.0" }
postgresql = { module = "org.postgresql:postgresql", version = "42.3.9" }
prometheusClient = { module = "io.prometheus:simpleclient" }
prometheusClientCommon = { module = "io.prometheus:simpleclient_common" }
prometheusClientBom = { module = "io.prometheus:simpleclient_bom", version = "0.16.0" }
prometheusHotspot = { module = "io.prometheus:simpleclient_hotspot" }
prometheusHttpserver = { module = "io.prometheus:simpleclient_httpserver" }
protoGoogleCommon = { module = "com.google.api.grpc:proto-google-common-protos", version = "2.43.0" }
protobufGradlePlugin = { module = "com.google.protobuf:protobuf-gradle-plugin", version.ref = "protobufPlugin" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitMock = { module = "com.squareup.retrofit2:retrofit-mock", version.ref = "retrofit" }
retrofitMoshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }
retrofitProtobuf = { module = "com.squareup.retrofit2:converter-protobuf", version.ref = "retrofit" }
retrofitScalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit" }
retrofitWire = { module = "com.squareup.retrofit2:converter-wire", version.ref = "retrofit" }
servletApi = { module = "javax.servlet:javax.servlet-api", version = "3.1.0" }
slf4jApi = { module = "org.slf4j:slf4j-api", version = "2.0.16" }
tempest2Testing = { module = "app.cash.tempest:tempest2-testing" }
tempest2TestingDocker = { module = "app.cash.tempest:tempest2-testing-docker" }
tempest2TestingInternal = { module = "app.cash.tempest:tempest2-testing-internal" }
tempest2TestingJvm = { module = "app.cash.tempest:tempest2-testing-jvm" }
tempestBom = { module = "app.cash.tempest:tempest-bom", version = "2024.08.07.002316-64f40ef" }
tempestTesting = { module = "app.cash.tempest:tempest-testing" }
tempestTestingDocker = { module = "app.cash.tempest:tempest-testing-docker" }
tempestTestingInternal = { module = "app.cash.tempest:tempest-testing-internal" }
tempestTestingJvm = { module = "app.cash.tempest:tempest-testing-jvm" }
threeTenBp = { module = "org.threeten:threetenbp", version = "1.6.9" }
sqldelightGradlePlugin = { module = "app.cash.sqldelight:gradle-plugin", version.ref = "sqldelight" }
sqldelightJdbcDriver = { module = "app.cash.sqldelight:jdbc-driver", version.ref = "sqldelight" }
sqldelightMysqlDialect = { module = "app.cash.sqldelight:mysql-dialect", version.ref = "sqldelight" }
sqldelightRuntime = { module = "app.cash.sqldelight:runtime", version.ref = "sqldelight" }
tink = { module = "com.google.crypto.tink:tink", version = "1.12.0" }
tinkAwskms = { module = "com.google.crypto.tink:tink-awskms", version = "1.9.1" }
tinkGcpkms = { module = "com.google.crypto.tink:tink-gcpkms", version = "1.10.0" }
tracingDatadog = { module = "com.datadoghq:dd-trace-api", version.ref = "datadog" }
wireBom = { module = "com.squareup.wire:wire-bom", version.ref = "wire" }
wireGradlePlugin = { module = "com.squareup.wire:wire-gradle-plugin", version.ref = "wire" }
wireGrpcClient = { module = "com.squareup.wire:wire-grpc-client", version.ref = "wire" }
wireMoshiAdapter = { module = "com.squareup.wire:wire-moshi-adapter", version.ref = "wire" }
wireReflector = { module = "com.squareup.wire:wire-reflector", version.ref = "wire" }
wireRuntime = { module = "com.squareup.wire:wire-runtime", version.ref = "wire" }
wireSchema = { module = "com.squareup.wire:wire-schema", version.ref = "wire" }

[plugins]
binaryCompatibilityValidator = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "kotlinBinaryCompatibilityPlugin" }
dependencyAnalysis = { id = "com.autonomousapps.dependency-analysis", version.ref = "dependencyAnalysisPlugin" }
flyway = { id = "org.flywaydb.flyway" }
jooq = { id = "nu.studer.jooq" }
kotlinAllOpen = { id = "org.jetbrains.kotlin.plugin.allopen" }
kotlinJpa = { id = "org.jetbrains.kotlin.plugin.jpa" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm" }
mavenPublish = { id = "com.vanniktech.maven.publish" }
mavenPublishBase = { id = "com.vanniktech.maven.publish.base", version.ref = "mavenPublish" }
protobuf = { id = "com.google.protobuf" }
sqldelight = { id = "app.cash.sqldelight" }
wire = { id = "com.squareup.wire" }
