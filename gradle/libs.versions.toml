[versions]
apacheCommons2 = "2.11.1"
apacheCommons3 = "3.11"
assertj = "3.24.2"
awaitility = "4.1.0"
aws = "1.12.460"
aws2 = "2.19.33"
bouncycastle = "1.70"
concurrencyLimits = "0.3.6"
cronUtils = "9.1.5"
datasourceProxy = "1.7"
dependencyAnalysisPlugin = "1.19.0"
docker = "3.3.0"
dokkaPlugin = "1.6.10"
findBugs = "3.0.2"
flywayPlugin = "9.14.1"
gax = "2.5.0"
gcpApiClient = "1.32.1"
gcpApiServicesStorage = "v1-rev20210127-1.31.5"
gcpAuthLibraryCredentials = "1.1.0"
gcpCore = "1.95.4"
gcpDatastore = "1.107.1"
gcpHttpClient = "1.40.0"
gcpHttpClientJackson = "1.39.2"
gcpKms = "v1-rev20210622-1.31.5"
gcpLogback = "0.130.11-alpha"
gcpLogging = "2.3.2"
gcpSpanner = "6.13.0"
gcpStorage = "1.117.1"
grpc = "1.55.1"
guava = "30.1.1-jre"
guice = "5.1.0"
hibernate = "5.5.3.Final"
hikariCp = "4.0.3"
hsqldb = "2.6.1"
jackson = "2.15.0"
javaxAnnotation = "1.3.2"
javaxInject = "1"
javaxPersistenceApi = "2.2"
jcommander = "1.72"
jedis = "4.1.1"
jersey = "3.0.2"
jetty = "10.0.11"
jettyServletApi = "4.0.6"
jooq = "3.15.0"
jooqPlugin = "7.1.1"
junit = "5.9.3"
kotlin = "1.8.21"
kotlinBinaryCompatibilityPlugin = "0.13.1"
kotlinLogging = "3.0.5"
kotlinRetry = "1.0.9"
kotlinx = "1.7.0"
kubernetes = "14.0.0"
launchdarkly = "5.10.7"
logback = "1.4.7"
mavenPublishGradlePlugin = "0.23.2"
mockito = "5.3.1"
moshi = "1.14.0"
mysql = "8.0.21"
netty = "4.1.92.Final"
okHttp = "4.11.0"
okio = "3.3.0"
openTracing = "0.33.0"
openTracingConcurrent = "0.4.0"
openTracingDatadog = "1.12.1"
openTracingJdbc = "0.2.15"
openTracingOkHttp = "3.0.0"
postgresql = "42.2.23"
prometheus = "0.16.0"
protoGoogleCommon = "2.9.0"
protobufGradlePlugin = "0.9.3"
protobufJava = "3.21.7"
protoc = "3.19.2"
retrofit = "2.9.0"
servletApi = "3.1.0"
slf4j = "2.0.7"
tempest = "1.7.0"
tink = "1.6.1"
wire = "4.6.0"
wisp = "1.4.0"

[libraries]
apacheCommonsLang3 = { module = "org.apache.commons:commons-lang3", version.ref = "apacheCommons3" }
apacheCommonsPool2 = { module = "org.apache.commons:commons-pool2", version.ref = "apacheCommons2" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
awaitilityKotlin = { module = "org.awaitility:awaitility-kotlin", version.ref = "awaitility" }
aws2Dynamodb = { module = "software.amazon.awssdk:dynamodb", version.ref = "aws2" }
aws2DynamodbEnhanced = { module = "software.amazon.awssdk:dynamodb-enhanced", version.ref = "aws2" }
awsAuth = { module = "software.amazon.awssdk:auth", version.ref = "aws2" }
awsCore = { module = "software.amazon.awssdk:aws-core", version.ref = "aws2" }
awsDynamodb = { module = "com.amazonaws:aws-java-sdk-dynamodb", version.ref = "aws" }
awsJavaSdkCore = { module = "com.amazonaws:aws-java-sdk-core", version.ref = "aws" }
awsRegions = { module = "software.amazon.awssdk:regions", version.ref = "aws2" }
awsS3 = { module = "com.amazonaws:aws-java-sdk-s3", version.ref = "aws" }
awsSdkCore = { module = "software.amazon.awssdk:sdk-core", version.ref = "aws2" }
awsSqs = { module = "com.amazonaws:aws-java-sdk-sqs", version.ref = "aws" }
bouncycastle = { module = "org.bouncycastle:bcprov-jdk15on", version.ref = "bouncycastle" }
bouncycastlePgp = { module = "org.bouncycastle:bcpg-jdk15on", version.ref = "bouncycastle" }
concurrencyLimitsCore = { module = "com.netflix.concurrency-limits:concurrency-limits-core", version.ref = "concurrencyLimits" }
cronUtils = { module = "com.cronutils:cron-utils", version.ref = "cronUtils" }
datasourceProxy = { module = "net.ttddyy:datasource-proxy", version.ref = "datasourceProxy" }
dockerApi = { module = "com.github.docker-java:docker-java-api", version.ref = "docker" }
dockerCore = { module = "com.github.docker-java:docker-java-core", version.ref = "docker" }
dockerTransport = { module = "com.github.docker-java:docker-java-transport", version.ref = "docker" }
dockerTransportHttpClient = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "docker" }
findBugs = { module = "com.google.code.findbugs:jsr305", version.ref = "findBugs" }
gax = { module = "com.google.api:gax", version.ref = "gax" }
gcpCloudCore = { module = "com.google.cloud:google-cloud-core", version.ref = "gcpCore" }
gcpCloudStorage = { module = "com.google.cloud:google-cloud-storage", version.ref = "gcpStorage" }
gcpDatastore = { module = "com.google.cloud:google-cloud-datastore", version.ref = "gcpDatastore" }
gcpKms = { module = "com.google.apis:google-api-services-cloudkms", version.ref = "gcpKms" }
gcpLogback = { module = "com.google.cloud:google-cloud-logging-logback", version.ref = "gcpLogback" }
gcpLogging = { module = "com.google.cloud:google-cloud-logging", version.ref = "gcpLogging" }
gcpSpanner = { module = "com.google.cloud:google-cloud-spanner", version.ref = "gcpSpanner" }
googleApiClient = { module = "com.google.api-client:google-api-client", version.ref = "gcpApiClient" }
googleApiServicesStorage = { module = "com.google.apis:google-api-services-storage", version.ref = "gcpApiServicesStorage" }
googleAuthLibraryCredentials = { module = "com.google.auth:google-auth-library-credentials", version.ref = "gcpAuthLibraryCredentials" }
googleAuthLibraryOauth2 = { module = "com.google.auth:google-auth-library-oauth2-http", version.ref = "gcpAuthLibraryCredentials" }
googleCloudCoreHttp = { module = "com.google.cloud:google-cloud-core-http", version.ref = "gcpCore" }
googleHttpClient = { module = "com.google.http-client:google-http-client", version.ref = "gcpHttpClient" }
googleHttpClientJackson = { module = "com.google.http-client:google-http-client-jackson2", version.ref = "gcpHttpClientJackson" }
grpcApi = { module = "io.grpc:grpc-api", version.ref = "grpc" }
grpcBom = { module = "io.grpc:grpc-bom", version.ref = "grpc" }
grpcGenJava = { module = "io.grpc:protoc-gen-grpc-java", version.ref = "grpc" }
grpcNetty = { module = "io.grpc:grpc-netty", version.ref = "grpc" }
grpcProtobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpcStub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
guavaTestLib = { module = "com.google.guava:guava-testlib", version.ref = "guava" }
guice = { module = "com.google.inject:guice", version.ref = "guice" }
guiceTestLib = { module = "com.google.inject.extensions:guice-testlib", version.ref = "guice" }
hibernateCore = { module = "org.hibernate:hibernate-core", version.ref = "hibernate" }
hikariCp = { module = "com.zaxxer:HikariCP", version.ref = "hikariCp" }
hsqldb = { module = "org.hsqldb:hsqldb", version.ref = "hsqldb" }
jCommander = { module = "com.beust:jcommander", version.ref = "jcommander" }
jacksonAnotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson" }
jacksonBom = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
jacksonCore = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jacksonDatabind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jacksonDataformatYaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jacksonJsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jacksonKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
javaxAnnotation = { module = "javax.annotation:javax.annotation-api", version.ref = "javaxAnnotation" }
javaxInject = { module = "javax.inject:javax.inject", version.ref = "javaxInject" }
javaxPersistenceApi = { module = "javax.persistence:javax.persistence-api", version.ref = "javaxPersistenceApi" }
jedis = { module = "redis.clients:jedis", version.ref = "jedis" }
jerseyBom = { module = "org.glassfish.jersey:jersey-bom", version.ref = "jersey" }
jettyAlpnServer = { module = "org.eclipse.jetty:jetty-alpn-server", version.ref = "jetty" }
jettyAlpnServerJava = { module = "org.eclipse.jetty:jetty-alpn-java-server", version.ref = "jetty" }
jettyBom = { module = "org.eclipse.jetty:jetty-bom", version.ref = "jetty" }
jettyHttp = { module = "org.eclipse.jetty:jetty-http", version.ref = "jetty" }
jettyHttp2 = { module = "org.eclipse.jetty.http2:http2-server", version.ref = "jetty" }
jettyHttp2Common = { module = "org.eclipse.jetty.http2:http2-common", version.ref = "jetty" }
jettyIo = { module = "org.eclipse.jetty:jetty-io", version.ref = "jetty" }
jettyServer = { module = "org.eclipse.jetty:jetty-server", version.ref = "jetty" }
jettyServlet = { module = "org.eclipse.jetty:jetty-servlet", version.ref = "jetty" }
jettyServletApi = { module = "org.eclipse.jetty.toolchain:jetty-servlet-api", version.ref = "jettyServletApi" }
jettyServlets = { module = "org.eclipse.jetty:jetty-servlets", version.ref = "jetty" }
jettyUnixSocket = { module = "org.eclipse.jetty:jetty-unixsocket-server", version.ref = "jetty" }
jettyUtil = { module = "org.eclipse.jetty:jetty-util", version.ref = "jetty" }
jettyWebsocketApi = { module = "org.eclipse.jetty.websocket:websocket-jetty-api", version.ref = "jetty" }
jettyWebsocketServer = { module = "org.eclipse.jetty.websocket:websocket-jetty-server", version.ref = "jetty" }
jooq = { module = "org.jooq:jooq", version.ref = "jooq" }
junitApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junitEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junitParams = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
kotlinBom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }
kotlinLogging = { module = "io.github.microutils:kotlin-logging", version.ref = "kotlinLogging" }
kotlinReflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinRetry = { module = "com.michael-bull.kotlin-retry:kotlin-retry", version.ref = "kotlinRetry" }
kotlinStdLibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
kotlinTest = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinxCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx" }
kubernetesClient = { module = "io.kubernetes:client-java", version.ref = "kubernetes" }
kubernetesClientApi = { module = "io.kubernetes:client-java-api", version.ref = "kubernetes" }
launchDarkly = { module = "com.launchdarkly:launchdarkly-java-server-sdk", version.ref = "launchdarkly" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logbackCore = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
mockitoCore = { module = "org.mockito:mockito-core", version.ref = "mockito" }
moshi = { module = "com.squareup.moshi:moshi", version.ref = "moshi" }
moshiAdapters = { module = "com.squareup.moshi:moshi-adapters", version.ref = "moshi" }
mysql = { module = "mysql:mysql-connector-java", version.ref = "mysql" }
nettyBom = { module = "io.netty:netty-bom", version.ref = "netty" }
nettyHandler = { module = "io.netty:netty-handler", version.ref = "netty" }
okHttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okHttp" }
okHttpMockWebServer = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okHttp" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
openTracingApi = { module = "io.opentracing:opentracing-api", version.ref = "openTracing" }
openTracingConcurrent = { module = "io.opentracing.contrib:opentracing-concurrent", version.ref = "openTracingConcurrent" }
openTracingDatadog = { module = "com.datadoghq:dd-trace-ot", version.ref = "openTracingDatadog" }
openTracingDatadogApi = { module = "com.datadoghq:dd-trace-api", version.ref = "openTracingDatadog" }
openTracingJdbc = { module = "io.opentracing.contrib:opentracing-jdbc", version.ref = "openTracingJdbc" }
openTracingMock = { module = "io.opentracing:opentracing-mock", version.ref = "openTracing" }
openTracingOkHttp = { module = "io.opentracing.contrib:opentracing-okhttp3", version.ref = "openTracingOkHttp" }
openTracingUtil = { module = "io.opentracing:opentracing-util", version.ref = "openTracing" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
prometheusClient = { module = "io.prometheus:simpleclient", version.ref = "prometheus" }
prometheusClientBom = { module = "io.prometheus:simpleclient_bom", version.ref = "prometheus" }
prometheusHotspot = { module = "io.prometheus:simpleclient_hotspot", version.ref = "prometheus" }
prometheusHttpserver = { module = "io.prometheus:simpleclient_httpserver", version.ref = "prometheus" }
protoGoogleCommon = { module = "com.google.api.grpc:proto-google-common-protos", version.ref = "protoGoogleCommon" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version.ref = "protobufJava" }
protoc = { module = "com.google.protobuf:protoc", version.ref = "protoc" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitMock = { module = "com.squareup.retrofit2:retrofit-mock", version.ref = "retrofit" }
retrofitMoshi = { module = "com.squareup.retrofit2:converter-moshi", version.ref = "retrofit" }
retrofitProtobuf = { module = "com.squareup.retrofit2:converter-protobuf", version.ref = "retrofit" }
retrofitScalars = { module = "com.squareup.retrofit2:converter-scalars", version.ref = "retrofit" }
retrofitWire = { module = "com.squareup.retrofit2:converter-wire", version.ref = "retrofit" }
servletApi = { module = "javax.servlet:javax.servlet-api", version.ref = "servletApi" }
slf4jApi = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
tempest2Testing = { module = "app.cash.tempest:tempest2-testing", version.ref = "tempest" }
tempest2TestingDocker = { module = "app.cash.tempest:tempest2-testing-docker", version.ref = "tempest" }
tempest2TestingInternal = { module = "app.cash.tempest:tempest2-testing-internal", version.ref = "tempest" }
tempest2TestingJvm = { module = "app.cash.tempest:tempest2-testing-jvm", version.ref = "tempest" }
tempestTesting = { module = "app.cash.tempest:tempest-testing", version.ref = "tempest" }
tempestTestingDocker = { module = "app.cash.tempest:tempest-testing-docker", version.ref = "tempest" }
tempestTestingInternal = { module = "app.cash.tempest:tempest-testing-internal", version.ref = "tempest" }
tempestTestingJvm = { module = "app.cash.tempest:tempest-testing-jvm", version.ref = "tempest" }
tink = { module = "com.google.crypto.tink:tink", version.ref = "tink" }
tinkAwskms = { module = "com.google.crypto.tink:tink-awskms", version.ref = "tink" }
tinkGcpkms = { module = "com.google.crypto.tink:tink-gcpkms", version.ref = "tink" }
wireBom = { module = "com.squareup.wire:wire-bom", version.ref = "wire" }
wireGrpcClient = { module = "com.squareup.wire:wire-grpc-client", version.ref = "wire" }
wireMoshiAdapter = { module = "com.squareup.wire:wire-moshi-adapter", version.ref = "wire" }
wireReflector = { module = "com.squareup.wire:wire-reflector", version.ref = "wire" }
wireRuntime = { module = "com.squareup.wire:wire-runtime", version.ref = "wire" }
wireSchema = { module = "com.squareup.wire:wire-schema", version.ref = "wire" }
wispAwsEnvironment = { module = "app.cash.wisp:wisp-aws-environment", version.ref = "wisp" }
wispBom = { module = "app.cash.wisp:wisp-bom", version.ref = "wisp" }
wispClient = { module = "app.cash.wisp:wisp-client", version.ref = "wisp" }
wispConfig = { module = "app.cash.wisp:wisp-config", version.ref = "wisp" }
wispContainersTesting = { module = "app.cash.wisp:wisp-containers-testing", version.ref = "wisp" }
wispDeployment = { module = "app.cash.wisp:wisp-deployment", version.ref = "wisp" }
wispDeploymentTesting = { module = "app.cash.wisp:wisp-deployment-testing", version.ref = "wisp" }
wispFeature = { module = "app.cash.wisp:wisp-feature", version.ref = "wisp" }
wispFeatureTesting = { module = "app.cash.wisp:wisp-feature-testing", version.ref = "wisp" }
wispLaunchDarkly = { module = "app.cash.wisp:wisp-launchdarkly", version.ref = "wisp" }
wispLease = { module = "app.cash.wisp:wisp-lease", version.ref = "wisp" }
wispLeaseTesting = { module = "app.cash.wisp:wisp-lease-testing", version.ref = "wisp" }
wispLogging = { module = "app.cash.wisp:wisp-logging", version.ref = "wisp" }
wispLoggingTesting = { module = "app.cash.wisp:wisp-logging-testing", version.ref = "wisp" }
wispMoshi = { module = "app.cash.wisp:wisp-moshi", version.ref = "wisp" }
wispResourceLoader = { module = "app.cash.wisp:wisp-resource-loader", version.ref = "wisp" }
wispResourceLoaderTesting = { module = "app.cash.wisp:wisp-resource-loader-testing", version.ref = "wisp" }
wispSsl = { module = "app.cash.wisp:wisp-ssl", version.ref = "wisp" }
wispTimeTesting = { module = "app.cash.wisp:wisp-time-testing", version.ref = "wisp" }
wispToken = { module = "app.cash.wisp:wisp-token", version.ref = "wisp" }
wispTokenTesting = { module = "app.cash.wisp:wisp-token-testing", version.ref = "wisp" }

[plugins]
dependencyAnalysisPlugin = { id = "com.autonomousapps.dependency-analysis", version.ref = "dependencyAnalysisPlugin" }
dokkaGradlePlugin = { id = "org.jetbrains.dokka", version.ref = "dokkaPlugin" }
flywayPlugin = { id = "org.flywaydb.flyway", version.ref = "flywayPlugin" }
kotlinAllOpenPlugin = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
kotlinBinaryCompatibilityPlugin = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "kotlinBinaryCompatibilityPlugin" }
kotlinGradlePlugin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinJpaPlugin = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlinNoArgPlugin = { id = "org.jetbrains.kotlin.plugin.noarg", version.ref = "kotlin" }
mavenPublishGradlePlugin = { id = "com.vanniktech.maven.publish.base", version.ref = "mavenPublishGradlePlugin" }
protobufGradlePlugin = { id = "com.google.protobuf", version.ref = "protobufGradlePlugin" }
wireGradlePlugin = { id = "com.squareup.wire", version.ref = "wire" }
jooqPlugin = { id = "nu.studer.jooq", version.ref = "jooqPlugin" }
