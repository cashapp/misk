// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: parsing/parsing.proto
package com.squareup.protos.test.parsing;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okio.ByteString;

public final class Warehouse extends Message<Warehouse, Warehouse.Builder> {
  public static final ProtoAdapter<Warehouse> ADAPTER = new ProtoAdapter_Warehouse();
  public static final Long DEFAULT_WAREHOUSE_ID = 0L;
  public static final String DEFAULT_WAREHOUSE_TOKEN = "";
  private static final long serialVersionUID = 0L;
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long warehouse_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String warehouse_token;

  @WireField(
      tag = 3,
      adapter = "com.squareup.protos.test.parsing.Warehouse#ADAPTER"
  )
  public final Warehouse central_repo;

  @WireField(
      tag = 4,
      adapter = "com.squareup.protos.test.parsing.Warehouse#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Warehouse> alternates;

  @WireField(
      tag = 6,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> dropoff_points;

  @WireField(
      tag = 7,
      keyAdapter = "com.squareup.wire.ProtoAdapter#INT32",
      adapter = "com.squareup.protos.test.parsing.Robot#ADAPTER"
  )
  public final Map<Integer, Robot> robots;

  public Warehouse(Long warehouse_id, String warehouse_token, Warehouse central_repo,
      List<Warehouse> alternates, Map<String, String> dropoff_points, Map<Integer, Robot> robots) {
    this(warehouse_id, warehouse_token, central_repo, alternates, dropoff_points, robots,
        ByteString.EMPTY);
  }

  public Warehouse(Long warehouse_id, String warehouse_token, Warehouse central_repo,
      List<Warehouse> alternates, Map<String, String> dropoff_points, Map<Integer, Robot> robots,
      ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.warehouse_id = warehouse_id;
    this.warehouse_token = warehouse_token;
    this.central_repo = central_repo;
    this.alternates = Internal.immutableCopyOf("alternates", alternates);
    this.dropoff_points = Internal.immutableCopyOf("dropoff_points", dropoff_points);
    this.robots = Internal.immutableCopyOf("robots", robots);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.warehouse_id = warehouse_id;
    builder.warehouse_token = warehouse_token;
    builder.central_repo = central_repo;
    builder.alternates = Internal.copyOf("alternates", alternates);
    builder.dropoff_points = Internal.copyOf("dropoff_points", dropoff_points);
    builder.robots = Internal.copyOf("robots", robots);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Warehouse)) return false;
    Warehouse o = (Warehouse) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(warehouse_id, o.warehouse_id)
        && Internal.equals(warehouse_token, o.warehouse_token)
        && Internal.equals(central_repo, o.central_repo)
        && alternates.equals(o.alternates)
        && dropoff_points.equals(o.dropoff_points)
        && robots.equals(o.robots);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (warehouse_id != null ? warehouse_id.hashCode() : 0);
      result = result * 37 + (warehouse_token != null ? warehouse_token.hashCode() : 0);
      result = result * 37 + (central_repo != null ? central_repo.hashCode() : 0);
      result = result * 37 + alternates.hashCode();
      result = result * 37 + dropoff_points.hashCode();
      result = result * 37 + robots.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (warehouse_id != null) builder.append(", warehouse_id=").append(warehouse_id);
    if (warehouse_token != null) builder.append(", warehouse_token=").append(warehouse_token);
    if (central_repo != null) builder.append(", central_repo=").append(central_repo);
    if (!alternates.isEmpty()) builder.append(", alternates=").append(alternates);
    if (!dropoff_points.isEmpty()) builder.append(", dropoff_points=").append(dropoff_points);
    if (!robots.isEmpty()) builder.append(", robots=").append(robots);
    return builder.replace(0, 2, "Warehouse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Warehouse, Builder> {
    public Long warehouse_id;

    public String warehouse_token;

    public Warehouse central_repo;

    public List<Warehouse> alternates;

    public Map<String, String> dropoff_points;

    public Map<Integer, Robot> robots;

    public Builder() {
      alternates = Internal.newMutableList();
      dropoff_points = Internal.newMutableMap();
      robots = Internal.newMutableMap();
    }

    public Builder warehouse_id(Long warehouse_id) {
      this.warehouse_id = warehouse_id;
      return this;
    }

    public Builder warehouse_token(String warehouse_token) {
      this.warehouse_token = warehouse_token;
      return this;
    }

    public Builder central_repo(Warehouse central_repo) {
      this.central_repo = central_repo;
      return this;
    }

    public Builder alternates(List<Warehouse> alternates) {
      Internal.checkElementsNotNull(alternates);
      this.alternates = alternates;
      return this;
    }

    public Builder dropoff_points(Map<String, String> dropoff_points) {
      Internal.checkElementsNotNull(dropoff_points);
      this.dropoff_points = dropoff_points;
      return this;
    }

    public Builder robots(Map<Integer, Robot> robots) {
      Internal.checkElementsNotNull(robots);
      this.robots = robots;
      return this;
    }

    @Override
    public Warehouse build() {
      return new Warehouse(warehouse_id, warehouse_token, central_repo, alternates, dropoff_points,
          robots, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Warehouse extends ProtoAdapter<Warehouse> {
    private final ProtoAdapter<Map<String, String>> dropoff_points =
        ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    private final ProtoAdapter<Map<Integer, Robot>> robots =
        ProtoAdapter.newMapAdapter(ProtoAdapter.INT32, Robot.ADAPTER);

    public ProtoAdapter_Warehouse() {
      super(FieldEncoding.LENGTH_DELIMITED, Warehouse.class);
    }

    @Override
    public int encodedSize(Warehouse value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.warehouse_id)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.warehouse_token)
          + Warehouse.ADAPTER.encodedSizeWithTag(3, value.central_repo)
          + Warehouse.ADAPTER.asRepeated().encodedSizeWithTag(4, value.alternates)
          + dropoff_points.encodedSizeWithTag(6, value.dropoff_points)
          + robots.encodedSizeWithTag(7, value.robots)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Warehouse value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.warehouse_id);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.warehouse_token);
      Warehouse.ADAPTER.encodeWithTag(writer, 3, value.central_repo);
      Warehouse.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.alternates);
      dropoff_points.encodeWithTag(writer, 6, value.dropoff_points);
      robots.encodeWithTag(writer, 7, value.robots);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Warehouse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1; ) {
        switch (tag) {
          case 1:
            builder.warehouse_id(ProtoAdapter.INT64.decode(reader));
            break;
          case 2:
            builder.warehouse_token(ProtoAdapter.STRING.decode(reader));
            break;
          case 3:
            builder.central_repo(Warehouse.ADAPTER.decode(reader));
            break;
          case 4:
            builder.alternates.add(Warehouse.ADAPTER.decode(reader));
            break;
          case 6:
            builder.dropoff_points.putAll(dropoff_points.decode(reader));
            break;
          case 7:
            builder.robots.putAll(robots.decode(reader));
            break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Warehouse redact(Warehouse value) {
      Builder builder = value.newBuilder();
      if (builder.central_repo != null) {
        builder.central_repo = Warehouse.ADAPTER.redact(builder.central_repo);
      }
      Internal.redactElements(builder.alternates, Warehouse.ADAPTER);
      Internal.redactElements(builder.robots, Robot.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
