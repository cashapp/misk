// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Convert incoming IWebActionAPI to IWebActionInternal processMetadata converts IWebActionAPI[] to IWebActionInternal[] 1`] = `
Array [
  Object {
    "allFields": "{\\"allowedCapabilities\\":[],\\"allowedServices\\":[],\\"applicationInterceptors\\":[],\\"httpMethod\\":\\"GET\\",\\"function\\":\\"fun misk.web.actions.LivenessCheckAction.livenessCheck(): misk.web.Response<kotlin.String>\\",\\"functionAnnotations\\":[\\"@misk.web.Get(pathPattern=/_liveness)\\",\\"@misk.web.ResponseContentType(value=text/plain;charset=utf-8)\\",\\"@misk.security.authz.Unauthenticated()\\"],\\"name\\":\\"LivenessCheckAction\\",\\"networkInterceptors\\":[\\"misk.web.interceptors.InternalErrorInterceptorFactory$Companion$INTERCEPTOR$1\\",\\"misk.web.interceptors.RequestLogContextInterceptor\\",\\"misk.web.interceptors.RequestLoggingInterceptor\\",\\"misk.web.interceptors.MetricsInterceptor\\",\\"misk.web.interceptors.TracingInterceptor\\",\\"misk.web.exceptions.ExceptionHandlingInterceptor\\",\\"misk.web.interceptors.MarshallerInterceptor\\",\\"misk.web.interceptors.WideOpenDevelopmentInterceptor\\"],\\"parameterTypes\\":[],\\"pathPattern\\":\\"/_liveness\\",\\"requestMediaTypes\\":[\\"*/*\\"],\\"responseMediaType\\":\\"text/plain;charset=utf-8\\",\\"returnType\\":\\"misk.web.Response<kotlin.String>\\"}",
    "allowedCapabilities": Array [
      "All",
    ],
    "allowedServices": Array [
      "All",
    ],
    "applicationInterceptors": Array [],
    "authFunctionAnnotations": Array [
      "@misk.security.authz.Unauthenticated()",
    ],
    "function": "misk.web.actions.LivenessCheckAction.livenessCheck(): misk.web.Response<kotlin.String>",
    "functionAnnotations": Array [
      "@misk.web.Get(pathPattern=/_liveness)",
      "@misk.web.ResponseContentType(value=text/plain;charset=utf-8)",
      "@misk.security.authz.Unauthenticated()",
    ],
    "httpMethod": Array [
      "GET",
    ],
    "name": "LivenessCheckAction",
    "networkInterceptors": Array [
      "misk.web.interceptors.InternalErrorInterceptorFactory$Companion$INTERCEPTOR$1",
      "misk.web.interceptors.RequestLogContextInterceptor",
      "misk.web.interceptors.RequestLoggingInterceptor",
      "misk.web.interceptors.MetricsInterceptor",
      "misk.web.interceptors.TracingInterceptor",
      "misk.web.exceptions.ExceptionHandlingInterceptor",
      "misk.web.interceptors.MarshallerInterceptor",
      "misk.web.interceptors.WideOpenDevelopmentInterceptor",
    ],
    "nonAccessOrTypeFunctionAnnotations": Array [],
    "parameterTypes": Array [],
    "pathPattern": "/_liveness",
    "requestMediaTypes": Array [
      "*/*",
    ],
    "responseMediaType": "text/plain;charset=utf-8",
    "returnType": "misk.web.Response<kotlin.String>",
    "typesMetadata": Immutable.OrderedMap {},
  },
]
`;
